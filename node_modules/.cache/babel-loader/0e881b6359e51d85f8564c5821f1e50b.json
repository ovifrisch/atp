{"ast":null,"code":"var _jsxFileName = \"/Users/ovidiufritsch/code/tennis_atp/atp_frontend/src/components/AgeComparison/Graph.js\";\nimport React from 'react';\n\nvar ChartistGraph = require('react-chartist');\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      players: props.players\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      players: nextProps.players\n    }); // maybe here you could look at the difference between the old props and the new props and\n    // only fetch the data that is new\n\n    var ranking_histories = [];\n\n    for (var i = 0; i < this.state.players.length; i++) {\n      var id = this.state.players[i];\n      fetch(\"/get_ranking_history?player_id=\".concat(id)).then(response => response.json().then(data => {}));\n    }\n  }\n\n  render() {\n    var players = this.state.players.map(x => {\n      return React.createElement(\"li\", {\n        key: x,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, x);\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, players);\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/Users/ovidiufritsch/code/tennis_atp/atp_frontend/src/components/AgeComparison/Graph.js"],"names":["React","ChartistGraph","require","Graph","Component","constructor","props","state","players","componentWillReceiveProps","nextProps","setState","ranking_histories","i","length","id","fetch","then","response","json","data","render","map","x"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,IAAIC,aAAa,GAAGC,OAAO,CAAC,gBAAD,CAA3B;;AAEA,MAAMC,KAAN,SAAoBH,KAAK,CAACI,SAA1B,CAAoC;AACnCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,OAAO,EAAEF,KAAK,CAACE;AADH,KAAb;AAGA;;AAEDC,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AACpC,SAAKC,QAAL,CAAc;AACbH,MAAAA,OAAO,EAAEE,SAAS,CAACF;AADN,KAAd,EADoC,CAKpC;AACA;;AAEA,QAAII,iBAAiB,GAAG,EAAxB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKN,KAAL,CAAWC,OAAX,CAAmBM,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AACnD,UAAIE,EAAE,GAAG,KAAKR,KAAL,CAAWC,OAAX,CAAmBK,CAAnB,CAAT;AACAG,MAAAA,KAAK,0CAAmCD,EAAnC,EAAL,CAA8CE,IAA9C,CAAmDC,QAAQ,IAC1DA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAqBG,IAAI,IAAI,CAE7B,CAFA,CADD;AAIA;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACR,QAAIb,OAAO,GAAG,KAAKD,KAAL,CAAWC,OAAX,CAAmBc,GAAnB,CAAuBC,CAAC,IAAI;AACzC,aAAO;AAAI,QAAA,GAAG,EAAEA,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAaA,CAAb,CAAP;AACA,KAFa,CAAd;AAIA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACEf,OADF,CADD;AAKA;;AApCkC;;AAuCpC,eAAeL,KAAf","sourcesContent":["import React from 'react';\nvar ChartistGraph = require('react-chartist')\n\nclass Graph extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tplayers: props.players\n\t\t}\n\t}\n\n\tcomponentWillReceiveProps(nextProps) {\n\t\tthis.setState({\n\t\t\tplayers: nextProps.players\n\t\t})\n\n\t\t// maybe here you could look at the difference between the old props and the new props and\n\t\t// only fetch the data that is new\n\n\t\tvar ranking_histories = []\n\t\tfor (var i = 0; i < this.state.players.length; i++) {\n\t\t\tvar id = this.state.players[i]\n\t\t\tfetch(`/get_ranking_history?player_id=${id}`).then(response => \n\t\t\t\tresponse.json().then(data => {\n\t\t\t\t\t\n\t\t\t}))\n\t\t}\n\t}\n\n\trender() {\n\t\tvar players = this.state.players.map(x => {\n\t\t\treturn <li key={x}>{x}</li>\n\t\t})\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{players}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}