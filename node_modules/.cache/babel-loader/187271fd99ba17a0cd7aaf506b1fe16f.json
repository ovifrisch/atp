{"ast":null,"code":"var _jsxFileName = \"/Users/ovidiufritsch/code/tennis_atp/atp_frontend/src/components/AgeComparison/Graph.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      datasets: [],\n      labels: [],\n      start_age: 20,\n      end_age: 30\n    };\n  }\n\n  generate_color() {\n    var o = Math.round,\n        r = Math.random,\n        s = 255;\n    return 'rgba(' + o(r() * s) + ',' + o(r() * s) + ',' + o(r() * s) + ',' + 1 + ')';\n  }\n\n  create_dataset(ranks, player_name, player_id, color_idx) {\n    var color;\n\n    if (color_idx < 8) {\n      color = Graph.colors[color_idx];\n    } else {\n      color = this.generate_color();\n    }\n\n    var res = {\n      data: {\n        label: player_name,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: color,\n        borderColor: color,\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: color,\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: color,\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: ranks\n      },\n      player_id: player_id,\n      player_name: player_name\n    };\n    return res;\n  } // http GET to flask api to fetch ranking history of player with id=p_id between ages of s and e\n\n\n  fetch_ranking_history(p_id, s, e) {\n    var endpt = \"/get_ranking_history?player_id=\".concat(p_id, \"&starting_age=\").concat(s, \"&ending_age=\").concat(e);\n    return fetch(endpt);\n  }\n\n  changeAgeRange(start, end) {\n    // if any part of the interval of the new range is in the old range,\n    // then we don't necessarily need to refetch this data. but for now\n    // to keep things simple, just refetch everything\n    var player_ids = this.state.datasets.map(x => x['player_id']);\n    var player_names = this.state.datasets.map(x => x['player_name']);\n    var new_labels = [];\n    var new_datasets = [];\n\n    const request = async idx => {\n      if (idx >= player_ids.length) {\n        this.setState({\n          datasets: new_datasets,\n          labels: new_labels,\n          start_age: start,\n          end_age: end\n        });\n        return;\n      }\n\n      var endpt = \"/get_ranking_history?player_id=\".concat(player_ids[idx], \"&starting_age=\").concat(start, \"&ending_age=\").concat(end);\n      const response = await fetch(endpt);\n      const data = await response.json();\n      var ranks = data['data'].map(x => x['rank']);\n      var labels = data['data'].map(x => x['age']);\n\n      if (labels.length > new_labels.length) {\n        new_labels = labels;\n      }\n\n      new_datasets.push(this.create_dataset(ranks, player_names[idx], player_ids[idx], idx));\n      request(idx + 1);\n    };\n\n    request(0);\n  }\n\n  addPlayer(player_id, player_name) {\n    var promise = this.fetch_ranking_history(player_id, this.state.start_age, this.state.end_age);\n    promise.then(response => response.json().then(data => {\n      var ranks = data['data'].map(x => x['rank']);\n      var new_labels = data['data'].map(x => x['age']);\n\n      if (new_labels.length < this.state.labels.length) {\n        new_labels = this.state.labels;\n      }\n\n      this.setState({\n        labels: new_labels,\n        datasets: [...this.state.datasets, this.create_dataset(ranks, player_name, player_id, this.state.datasets.length)]\n      });\n    }));\n  }\n\n  render() {\n    const datasets = this.state.datasets.map(x => x['data']);\n    const data = {\n      labels: this.state.labels,\n      datasets: datasets\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(Line, {\n      data: data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }));\n  }\n\n}\n\nGraph.colors = ['rgb(76, 128, 24, 1)', 'rgb(24, 76, 128, 1)', 'rgb(128, 24, 128, 1)', 'rgb(216, 12, 12, 1)', 'rgb(225, 122, 19, 1)', 'rgb(19, 225, 225, 1)', 'rgb(68, 97, 39, 1)', 'rgb(97, 39, 39, 1)'];\nexport default Graph;","map":{"version":3,"sources":["/Users/ovidiufritsch/code/tennis_atp/atp_frontend/src/components/AgeComparison/Graph.js"],"names":["React","Line","Graph","Component","constructor","props","state","datasets","labels","start_age","end_age","generate_color","o","Math","round","r","random","s","create_dataset","ranks","player_name","player_id","color_idx","color","colors","res","data","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","fetch_ranking_history","p_id","e","endpt","fetch","changeAgeRange","start","end","player_ids","map","x","player_names","new_labels","new_datasets","request","idx","length","setState","response","json","push","addPlayer","promise","then","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,IAAR,QAAmB,iBAAnB;;AAEA,MAAMC,KAAN,SAAoBF,KAAK,CAACG,SAA1B,CAAoC;AACnCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,QAAQ,EAAE,EADE;AAEZC,MAAAA,MAAM,EAAE,EAFI;AAGZC,MAAAA,SAAS,EAAE,EAHC;AAIZC,MAAAA,OAAO,EAAE;AAJG,KAAb;AAMA;;AAaDC,EAAAA,cAAc,GAAG;AAChB,QAAIC,CAAC,GAAGC,IAAI,CAACC,KAAb;AAAA,QAAoBC,CAAC,GAAGF,IAAI,CAACG,MAA7B;AAAA,QAAqCC,CAAC,GAAG,GAAzC;AACA,WAAO,UAAUL,CAAC,CAACG,CAAC,KAAGE,CAAL,CAAX,GAAqB,GAArB,GAA2BL,CAAC,CAACG,CAAC,KAAGE,CAAL,CAA5B,GAAsC,GAAtC,GAA4CL,CAAC,CAACG,CAAC,KAAGE,CAAL,CAA7C,GAAuD,GAAvD,GAA6D,CAA7D,GAAiE,GAAxE;AACA;;AAEDC,EAAAA,cAAc,CAACC,KAAD,EAAQC,WAAR,EAAqBC,SAArB,EAAgCC,SAAhC,EAA2C;AACxD,QAAIC,KAAJ;;AACA,QAAID,SAAS,GAAG,CAAhB,EAAmB;AAClBC,MAAAA,KAAK,GAAGrB,KAAK,CAACsB,MAAN,CAAaF,SAAb,CAAR;AACA,KAFD,MAGI;AACHC,MAAAA,KAAK,GAAG,KAAKZ,cAAL,EAAR;AACA;;AACD,QAAIc,GAAG,GACP;AACCC,MAAAA,IAAI,EAAE;AACLC,QAAAA,KAAK,EAAEP,WADF;AAELQ,QAAAA,IAAI,EAAE,KAFD;AAGLC,QAAAA,WAAW,EAAE,GAHR;AAILC,QAAAA,eAAe,EAAEP,KAJZ;AAKLQ,QAAAA,WAAW,EAAER,KALR;AAMLS,QAAAA,cAAc,EAAE,MANX;AAOLC,QAAAA,UAAU,EAAE,EAPP;AAQLC,QAAAA,gBAAgB,EAAE,GARb;AASLC,QAAAA,eAAe,EAAE,OATZ;AAULC,QAAAA,gBAAgB,EAAEb,KAVb;AAWLc,QAAAA,oBAAoB,EAAE,MAXjB;AAYLC,QAAAA,gBAAgB,EAAE,CAZb;AAaLC,QAAAA,gBAAgB,EAAE,CAbb;AAcLC,QAAAA,yBAAyB,EAAEjB,KAdtB;AAeLkB,QAAAA,qBAAqB,EAAE,qBAflB;AAgBLC,QAAAA,qBAAqB,EAAE,CAhBlB;AAiBLC,QAAAA,WAAW,EAAE,CAjBR;AAkBLC,QAAAA,cAAc,EAAE,EAlBX;AAmBLlB,QAAAA,IAAI,EAAEP;AAnBD,OADP;AAuBCE,MAAAA,SAAS,EAAEA,SAvBZ;AAwBCD,MAAAA,WAAW,EAAEA;AAxBd,KADA;AA4BA,WAAOK,GAAP;AACA,GAhEkC,CAkEnC;;;AACAoB,EAAAA,qBAAqB,CAACC,IAAD,EAAO7B,CAAP,EAAU8B,CAAV,EAAa;AACjC,QAAIC,KAAK,4CAAqCF,IAArC,2BAA0D7B,CAA1D,yBAA0E8B,CAA1E,CAAT;AACA,WAAOE,KAAK,CAACD,KAAD,CAAZ;AACA;;AAEDE,EAAAA,cAAc,CAACC,KAAD,EAAQC,GAAR,EAAa;AAC1B;AACA;AACA;AACA,QAAIC,UAAU,GAAG,KAAK/C,KAAL,CAAWC,QAAX,CAAoB+C,GAApB,CAAwBC,CAAC,IAAIA,CAAC,CAAC,WAAD,CAA9B,CAAjB;AACA,QAAIC,YAAY,GAAG,KAAKlD,KAAL,CAAWC,QAAX,CAAoB+C,GAApB,CAAwBC,CAAC,IAAIA,CAAC,CAAC,aAAD,CAA9B,CAAnB;AACA,QAAIE,UAAU,GAAG,EAAjB;AACA,QAAIC,YAAY,GAAG,EAAnB;;AAEA,UAAMC,OAAO,GAAG,MAAMC,GAAN,IAAc;AAC7B,UAAIA,GAAG,IAAIP,UAAU,CAACQ,MAAtB,EAA8B;AAC7B,aAAKC,QAAL,CAAc;AACbvD,UAAAA,QAAQ,EAAEmD,YADG;AAEblD,UAAAA,MAAM,EAAEiD,UAFK;AAGbhD,UAAAA,SAAS,EAAE0C,KAHE;AAIbzC,UAAAA,OAAO,EAAE0C;AAJI,SAAd;AAMA;AACA;;AACD,UAAIJ,KAAK,4CAAqCK,UAAU,CAACO,GAAD,CAA/C,2BAAqET,KAArE,yBAAyFC,GAAzF,CAAT;AACA,YAAMW,QAAQ,GAAG,MAAMd,KAAK,CAACD,KAAD,CAA5B;AACA,YAAMtB,IAAI,GAAG,MAAMqC,QAAQ,CAACC,IAAT,EAAnB;AACA,UAAI7C,KAAK,GAAGO,IAAI,CAAC,MAAD,CAAJ,CAAa4B,GAAb,CAAiBC,CAAC,IAAIA,CAAC,CAAC,MAAD,CAAvB,CAAZ;AACA,UAAI/C,MAAM,GAAGkB,IAAI,CAAC,MAAD,CAAJ,CAAa4B,GAAb,CAAiBC,CAAC,IAAIA,CAAC,CAAC,KAAD,CAAvB,CAAb;;AACA,UAAI/C,MAAM,CAACqD,MAAP,GAAgBJ,UAAU,CAACI,MAA/B,EAAuC;AACtCJ,QAAAA,UAAU,GAAGjD,MAAb;AACA;;AACDkD,MAAAA,YAAY,CAACO,IAAb,CAAkB,KAAK/C,cAAL,CAAoBC,KAApB,EAA2BqC,YAAY,CAACI,GAAD,CAAvC,EAA8CP,UAAU,CAACO,GAAD,CAAxD,EAA+DA,GAA/D,CAAlB;AACAD,MAAAA,OAAO,CAACC,GAAG,GAAG,CAAP,CAAP;AACA,KApBD;;AAsBAD,IAAAA,OAAO,CAAC,CAAD,CAAP;AACA;;AAEDO,EAAAA,SAAS,CAAC7C,SAAD,EAAYD,WAAZ,EAAyB;AAEjC,QAAI+C,OAAO,GAAG,KAAKtB,qBAAL,CAA2BxB,SAA3B,EAAsC,KAAKf,KAAL,CAAWG,SAAjD,EAA4D,KAAKH,KAAL,CAAWI,OAAvE,CAAd;AACAyD,IAAAA,OAAO,CAACC,IAAR,CAAaL,QAAQ,IAAIA,QAAQ,CAACC,IAAT,GAAgBI,IAAhB,CAAqB1C,IAAI,IAAI;AACrD,UAAIP,KAAK,GAAGO,IAAI,CAAC,MAAD,CAAJ,CAAa4B,GAAb,CAAiBC,CAAC,IAAIA,CAAC,CAAC,MAAD,CAAvB,CAAZ;AACA,UAAIE,UAAU,GAAG/B,IAAI,CAAC,MAAD,CAAJ,CAAa4B,GAAb,CAAiBC,CAAC,IAAIA,CAAC,CAAC,KAAD,CAAvB,CAAjB;;AACA,UAAIE,UAAU,CAACI,MAAX,GAAoB,KAAKvD,KAAL,CAAWE,MAAX,CAAkBqD,MAA1C,EAAkD;AACjDJ,QAAAA,UAAU,GAAG,KAAKnD,KAAL,CAAWE,MAAxB;AACA;;AACD,WAAKsD,QAAL,CAAc;AACbtD,QAAAA,MAAM,EAAEiD,UADK;AAEblD,QAAAA,QAAQ,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,QAAf,EAAyB,KAAKW,cAAL,CAAoBC,KAApB,EAA2BC,WAA3B,EAAwCC,SAAxC,EAAmD,KAAKf,KAAL,CAAWC,QAAX,CAAoBsD,MAAvE,CAAzB;AAFG,OAAd;AAIA,KAVwB,CAAzB;AAWA;;AAEDQ,EAAAA,MAAM,GAAG;AAER,UAAM9D,QAAQ,GAAG,KAAKD,KAAL,CAAWC,QAAX,CAAoB+C,GAApB,CAAwBC,CAAC,IAAIA,CAAC,CAAC,MAAD,CAA9B,CAAjB;AAEA,UAAM7B,IAAI,GAAG;AACZlB,MAAAA,MAAM,EAAE,KAAKF,KAAL,CAAWE,MADP;AAEZD,MAAAA,QAAQ,EAAEA;AAFE,KAAb;AAOA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAEmB,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADD;AAKA;;AA1IkC;;AAA9BxB,K,CAWEsB,M,GAAS,CACf,qBADe,EAEf,qBAFe,EAGf,sBAHe,EAIf,qBAJe,EAKf,sBALe,EAMf,sBANe,EAOf,oBAPe,EAQf,oBARe,C;AAkIjB,eAAetB,KAAf","sourcesContent":["import React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nclass Graph extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tdatasets: [],\n\t\t\tlabels: [],\n\t\t\tstart_age: 20,\n\t\t\tend_age: 30\n\t\t}\n\t}\n\n\tstatic colors = [\n\t\t'rgb(76, 128, 24, 1)',\n\t\t'rgb(24, 76, 128, 1)',\n\t\t'rgb(128, 24, 128, 1)',\n\t\t'rgb(216, 12, 12, 1)',\n\t\t'rgb(225, 122, 19, 1)',\n\t\t'rgb(19, 225, 225, 1)',\n\t\t'rgb(68, 97, 39, 1)',\n\t\t'rgb(97, 39, 39, 1)'\n\t]\n\n\tgenerate_color() {\n\t\tvar o = Math.round, r = Math.random, s = 255;\n\t\treturn 'rgba(' + o(r()*s) + ',' + o(r()*s) + ',' + o(r()*s) + ',' + 1 + ')';\n\t}\n\n\tcreate_dataset(ranks, player_name, player_id, color_idx) {\n\t\tvar color;\n\t\tif (color_idx < 8) {\n\t\t\tcolor = Graph.colors[color_idx]\n\t\t}\n\t\telse{\n\t\t\tcolor = this.generate_color()\n\t\t}\n\t\tvar res =\n\t\t{\n\t\t\tdata: {\n\t\t\t\tlabel: player_name,\n\t\t\t\tfill: false,\n\t\t\t\tlineTension: 0.1,\n\t\t\t\tbackgroundColor: color,\n\t\t\t\tborderColor: color,\n\t\t\t\tborderCapStyle: 'butt',\n\t\t\t\tborderDash: [],\n\t\t\t\tborderDashOffset: 0.0,\n\t\t\t\tborderJoinStyle: 'miter',\n\t\t\t\tpointBorderColor: color,\n\t\t\t\tpointBackgroundColor: '#fff',\n\t\t\t\tpointBorderWidth: 1,\n\t\t\t\tpointHoverRadius: 5,\n\t\t\t\tpointHoverBackgroundColor: color,\n\t\t\t\tpointHoverBorderColor: 'rgba(220,220,220,1)',\n\t\t\t\tpointHoverBorderWidth: 2,\n\t\t\t\tpointRadius: 1,\n\t\t\t\tpointHitRadius: 10,\n\t\t\t\tdata: ranks,\n\t\t\t},\n\n\t\t\tplayer_id: player_id,\n\t\t\tplayer_name: player_name\n\t\t}\n\n\t\treturn res\n\t}\n\n\t// http GET to flask api to fetch ranking history of player with id=p_id between ages of s and e\n\tfetch_ranking_history(p_id, s, e) {\n\t\tvar endpt = `/get_ranking_history?player_id=${p_id}&starting_age=${s}&ending_age=${e}`\n\t\treturn fetch(endpt)\n\t}\n\n\tchangeAgeRange(start, end) {\n\t\t// if any part of the interval of the new range is in the old range,\n\t\t// then we don't necessarily need to refetch this data. but for now\n\t\t// to keep things simple, just refetch everything\n\t\tvar player_ids = this.state.datasets.map(x => x['player_id'])\n\t\tvar player_names = this.state.datasets.map(x => x['player_name'])\n\t\tvar new_labels = [];\n\t\tvar new_datasets = [];\n\n\t\tconst request = async(idx) => {\n\t\t\tif (idx >= player_ids.length) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tdatasets: new_datasets,\n\t\t\t\t\tlabels: new_labels,\n\t\t\t\t\tstart_age: start,\n\t\t\t\t\tend_age: end\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\t\t\tvar endpt = `/get_ranking_history?player_id=${player_ids[idx]}&starting_age=${start}&ending_age=${end}`\n\t\t\tconst response = await fetch(endpt);\n\t\t\tconst data = await response.json();\n\t\t\tvar ranks = data['data'].map(x => x['rank'])\n\t\t\tvar labels = data['data'].map(x => x['age'])\n\t\t\tif (labels.length > new_labels.length) {\n\t\t\t\tnew_labels = labels\n\t\t\t}\n\t\t\tnew_datasets.push(this.create_dataset(ranks, player_names[idx], player_ids[idx], idx))\n\t\t\trequest(idx + 1)\n\t\t}\n\n\t\trequest(0)\n\t}\n\n\taddPlayer(player_id, player_name) {\n\n\t\tvar promise = this.fetch_ranking_history(player_id, this.state.start_age, this.state.end_age)\n\t\tpromise.then(response => response.json().then(data => {\n\t\t\tvar ranks = data['data'].map(x => x['rank'])\n\t\t\tvar new_labels = data['data'].map(x => x['age'])\n\t\t\tif (new_labels.length < this.state.labels.length) {\n\t\t\t\tnew_labels = this.state.labels\n\t\t\t}\n\t\t\tthis.setState({\n\t\t\t\tlabels: new_labels,\n\t\t\t\tdatasets: [...this.state.datasets, this.create_dataset(ranks, player_name, player_id, this.state.datasets.length)]\n\t\t\t})\n\t\t}))\n\t}\n\n\trender() {\n\n\t\tconst datasets = this.state.datasets.map(x => x['data'])\n\n\t\tconst data = {\n\t\t\tlabels: this.state.labels,\n\t\t\tdatasets: datasets\n\t\t};\n\n\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Line data={data} />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}