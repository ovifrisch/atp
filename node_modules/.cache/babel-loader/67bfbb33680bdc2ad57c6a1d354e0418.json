{"ast":null,"code":"var _jsxFileName = \"/Users/ovidiufritsch/code/tennis_atp/atp_frontend/src/components/AgeComparison/Graph.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      datasets: [],\n      labels: [],\n      start_age: 20,\n      end_age: 30\n    };\n  }\n\n  generate_color() {\n    var o = Math.round,\n        r = Math.random,\n        s = 255;\n    return 'rgba(' + o(r() * s) + ',' + o(r() * s) + ',' + o(r() * s) + ',' + 1 + ')';\n  }\n\n  create_dataset(ranks, player_name, player_id) {\n    var color;\n\n    if (this.state.datasets.length < 8) {\n      console.log(this.state.datasets.length);\n      color = Graph.colors[this.state.datasets.length];\n      console.log(color);\n    } else {\n      color = this.generate_color();\n    }\n\n    var res = {\n      data: {\n        label: player_name,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: color,\n        borderColor: color,\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: color,\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: color,\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: ranks\n      },\n      player_id: player_id\n    };\n    return res;\n  }\n\n  fetch_ranking_history(player_id, start, end) {}\n\n  changeAgeRange(start, end) {\n    // if any part of the interval of the new range is in the old range,\n    // then we don't necessarily need to refetch this data. but for now\n    // to keep things simple, just refetch everything\n    var player_ids = this.state.datasets.map(x => x['player_id']);\n    var new_labels;\n    var new_datasets;\n\n    for (id of player_ids) {}\n  }\n\n  addPlayer(player_id, player_name) {\n    fetch(\"/get_ranking_history?player_id=\".concat(player_id, \"&starting_age=\").concat(this.state.start_age, \"&ending_age=\").concat(this.state.end_age)).then(response => response.json().then(data => {\n      var ranks = data['data'].map(x => x['rank']);\n      var new_labels = data['data'].map(x => x['age']);\n\n      if (new_labels.length < this.state.labels.length) {\n        new_labels = this.state.labels;\n      }\n\n      this.setState({\n        labels: new_labels,\n        datasets: [...this.state.datasets, this.create_dataset(ranks, player_name, player_id)]\n      });\n    }));\n  }\n\n  render() {\n    const datasets = this.state.datasets.map(x => x['data']);\n    const data = {\n      labels: this.state.labels,\n      datasets: datasets\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Line, {\n      data: data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }));\n  }\n\n}\n\nGraph.colors = ['rgb(76, 128, 24, 1)', 'rgb(24, 76, 128, 1)', 'rgb(128, 24, 128, 1)', 'rgb(216, 12, 12, 1)', 'rgb(225, 122, 19, 1)', 'rgb(19, 225, 225, 1)', 'rgb(68, 97, 39, 1)', 'rgb(97, 39, 39, 1)'];\nexport default Graph;","map":{"version":3,"sources":["/Users/ovidiufritsch/code/tennis_atp/atp_frontend/src/components/AgeComparison/Graph.js"],"names":["React","Line","Graph","Component","constructor","props","state","datasets","labels","start_age","end_age","generate_color","o","Math","round","r","random","s","create_dataset","ranks","player_name","player_id","color","length","console","log","colors","res","data","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","fetch_ranking_history","start","end","changeAgeRange","player_ids","map","x","new_labels","new_datasets","id","addPlayer","fetch","then","response","json","setState","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nclass Graph extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tdatasets: [],\n\t\t\tlabels: [],\n\t\t\tstart_age: 20,\n\t\t\tend_age: 30\n\t\t}\n\t}\n\n\tstatic colors = [\n\t\t'rgb(76, 128, 24, 1)',\n\t\t'rgb(24, 76, 128, 1)',\n\t\t'rgb(128, 24, 128, 1)',\n\t\t'rgb(216, 12, 12, 1)',\n\t\t'rgb(225, 122, 19, 1)',\n\t\t'rgb(19, 225, 225, 1)',\n\t\t'rgb(68, 97, 39, 1)',\n\t\t'rgb(97, 39, 39, 1)'\n\t]\n\n\tgenerate_color() {\n\t\tvar o = Math.round, r = Math.random, s = 255;\n\t\treturn 'rgba(' + o(r()*s) + ',' + o(r()*s) + ',' + o(r()*s) + ',' + 1 + ')';\n\t}\n\n\tcreate_dataset(ranks, player_name, player_id) {\n\t\tvar color;\n\t\tif (this.state.datasets.length < 8) {\n\t\t\tconsole.log(this.state.datasets.length)\n\t\t\tcolor = Graph.colors[this.state.datasets.length]\n\t\t\tconsole.log(color)\n\t\t}\n\t\telse{\n\t\t\tcolor = this.generate_color()\n\t\t}\n\t\tvar res =\n\t\t{\n\t\t\tdata: {\n\t\t\t\tlabel: player_name,\n\t\t\t\tfill: false,\n\t\t\t\tlineTension: 0.1,\n\t\t\t\tbackgroundColor: color,\n\t\t\t\tborderColor: color,\n\t\t\t\tborderCapStyle: 'butt',\n\t\t\t\tborderDash: [],\n\t\t\t\tborderDashOffset: 0.0,\n\t\t\t\tborderJoinStyle: 'miter',\n\t\t\t\tpointBorderColor: color,\n\t\t\t\tpointBackgroundColor: '#fff',\n\t\t\t\tpointBorderWidth: 1,\n\t\t\t\tpointHoverRadius: 5,\n\t\t\t\tpointHoverBackgroundColor: color,\n\t\t\t\tpointHoverBorderColor: 'rgba(220,220,220,1)',\n\t\t\t\tpointHoverBorderWidth: 2,\n\t\t\t\tpointRadius: 1,\n\t\t\t\tpointHitRadius: 10,\n\t\t\t\tdata: ranks,\n\t\t\t},\n\n\t\t\tplayer_id: player_id\n\t\t}\n\n\t\treturn res\n\t}\n\n\tfetch_ranking_history(player_id, start, end) {\n\n\t}\n\n\tchangeAgeRange(start, end) {\n\t\t// if any part of the interval of the new range is in the old range,\n\t\t// then we don't necessarily need to refetch this data. but for now\n\t\t// to keep things simple, just refetch everything\n\t\tvar player_ids = this.state.datasets.map(x => x['player_id'])\n\t\tvar new_labels;\n\t\tvar new_datasets;\n\t\tfor (id of player_ids) {\n\n\t\t}\n\t}\n\n\taddPlayer(player_id, player_name) {\n\n\t\tfetch(`/get_ranking_history?player_id=${player_id}&starting_age=${this.state.start_age}&ending_age=${this.state.end_age}`).then(response =>\n\t\t\tresponse.json().then(data => {\n\t\t\t\tvar ranks = data['data'].map(x => x['rank'])\n\t\t\t\tvar new_labels = data['data'].map(x => x['age'])\n\t\t\t\tif (new_labels.length < this.state.labels.length) {\n\t\t\t\t\tnew_labels = this.state.labels\n\t\t\t\t}\n\t\t\t\tthis.setState({\n\t\t\t\t\tlabels: new_labels,\n\t\t\t\t\tdatasets: [...this.state.datasets, this.create_dataset(ranks, player_name, player_id)]\n\t\t\t\t})\n\t\t\t}))\n\t}\n\n\trender() {\n\n\t\tconst datasets = this.state.datasets.map(x => x['data'])\n\n\t\tconst data = {\n\t\t\tlabels: this.state.labels,\n\t\t\tdatasets: datasets\n\t\t};\n\n\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Line data={data} />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}