{"ast":null,"code":"var _jsxFileName = \"/Users/ovidiufritsch/code/tennis_atp/atp_frontend/src/components/AgeComparison/Graph.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      datasets: [],\n      labels: this.get_labels(20, 30),\n      start_age: 20,\n      end_age: 30,\n      available_colors: Graph.colors\n    };\n  }\n\n  get_labels(start_yr, end_yr) {\n    if (start_yr >= end_yr) {\n      return [];\n    }\n\n    var start = start_yr + 1 / 96;\n    var labels = [];\n\n    while (start <= end_yr) {\n      labels.push(start);\n      start = start + 1 / 96;\n    }\n\n    return labels;\n  }\n\n  generate_color() {\n    var o = Math.round,\n        r = Math.random,\n        s = 255;\n    return 'rgba(' + o(r() * s) + ',' + o(r() * s) + ',' + o(r() * s) + ',' + 1 + ')';\n  }\n\n  create_dataset(ranks, dates, player_name, player_id, color) {\n    var res = {\n      data: {\n        my_id: player_id,\n        label: player_name,\n        spanGaps: true,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: color,\n        borderColor: color,\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: color,\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: color,\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: ranks\n      },\n      dates: dates,\n      player_id: player_id,\n      player_name: player_name\n    };\n    return res;\n  } // http GET to flask api to fetch ranking history of player with id=p_id between ages of s and e\n\n\n  fetch_ranking_history(p_id, s, e) {\n    var endpt = \"/get_ranking_history?player_id=\".concat(p_id, \"&starting_age=\").concat(s, \"&ending_age=\").concat(e);\n    return fetch(endpt);\n  } // http GET to flask api to fetch significant matches for this player at this age\n\n\n  fetch_significant_matches(p_id, date) {\n    var date1 = add_weeks(date, 1);\n    var date2 = subtract_weeks(date, 1);\n    var endpt = \"/get_significant_matches?player_id=\".concat(p_id);\n  }\n\n  changeAgeRange(val, min_max) {\n    // if any part of the interval of the new range is in the old range,\n    // then we don't necessarily need to refetch this data. but for now\n    // to keep things simple, just refetch everything\n    var old_colors = this.state.datasets.map(x => x['data']['backgroundColor']);\n    var player_ids = this.state.datasets.map(x => x['player_id']);\n    var player_names = this.state.datasets.map(x => x['player_name']);\n    var new_datasets = [];\n    var start = this.state.start_age;\n    var end = this.state.end_age;\n\n    if (min_max == \"max\") {\n      end = val;\n    } else {\n      start = val;\n    }\n\n    var new_labels = this.get_labels(start, end);\n\n    const request = async idx => {\n      if (idx >= player_ids.length) {\n        this.setState({\n          datasets: new_datasets,\n          labels: new_labels,\n          start_age: start,\n          end_age: end\n        });\n        return;\n      }\n\n      var endpt = \"/get_ranking_history?player_id=\".concat(player_ids[idx], \"&starting_age=\").concat(start, \"&ending_age=\").concat(end);\n      const response = await fetch(endpt);\n      const data = await response.json();\n      var dates = data['data'].map(x => x['date']);\n      var ranks = data['data'].map(x => x['rank']);\n      var labels = data['data'].map(x => x['age']);\n      var values = this.pad_ranks(ranks, dates, labels, start, end);\n      var padded_ranks = values[0];\n      var padded_dates = values[1];\n      var new_dataset = this.create_dataset(padded_ranks, padded_dates, player_names[idx], player_ids[idx], old_colors[idx]);\n      new_datasets.push(new_dataset);\n      request(idx + 1);\n    };\n\n    request(0);\n  }\n\n  removePlayer(player_id) {\n    var new_available_colors = this.state.available_colors;\n\n    for (var i = 0; i < this.state.datasets.length; i++) {\n      if (this.state.datasets[i]['player_id'] === player_id) {\n        new_available_colors.unshift(this.state.datasets[i]['data']['backgroundColor']);\n      }\n    } // set the new labels to be the labels of maximum length without the one that's being removed\n    // we don't store all the other labels though...\n\n\n    this.setState({\n      datasets: this.state.datasets.filter(x => x['player_id'] !== player_id),\n      available_colors: new_available_colors\n    });\n  }\n\n  get_color() {\n    var color;\n\n    if (this.state.available_colors.length == 0) {\n      return this.generate_color();\n    }\n\n    return this.state.available_colors[0];\n  }\n\n  pad_ranks(ranks, dates, labels, start, end) {\n    var new_ranks = Array(Math.max(end - start, 0) * 96).fill(null);\n    var new_dates = Array(Math.max(end - start, 0) * 96).fill(null);\n\n    for (var i = 0; i < labels.length; i++) {\n      if (labels[i] < start || labels[i] > end) {\n        continue;\n      }\n\n      var idx = Math.floor((labels[i] - start) / (1 / 96));\n      new_dates[idx] = dates[i];\n\n      if (new_ranks[idx] === null) {\n        new_ranks[idx] = ranks[i];\n      } else {\n        console.log(Math.abs(new_ranks[idx] - ranks[i]));\n        new_ranks[idx] = Math.min(new_ranks[idx], ranks[i]);\n      }\n    }\n\n    return [new_ranks, new_dates];\n  }\n\n  addPlayer(player_id, player_name) {\n    // first check to see if this player has already been added\n    if (this.state.datasets.map(x => x['player_id']).includes(player_id)) {\n      return;\n    }\n\n    var promise = this.fetch_ranking_history(player_id, this.state.start_age, this.state.end_age);\n    promise.then(response => response.json().then(data => {\n      var ranks = data['data'].map(x => x['rank']);\n      var dates = data['data'].map(x => x['date']);\n      var labels = data['data'].map(x => x['age']);\n      var values = this.pad_ranks(ranks, dates, labels, this.state.start_age, this.state.end_age);\n      var padded_ranks = values[0];\n      var padded_dates = values[1];\n      var color = this.get_color();\n      var new_dataset = this.create_dataset(padded_ranks, padded_dates, player_name, player_id, color);\n      this.setState({\n        datasets: [...this.state.datasets, new_dataset],\n        available_colors: this.state.available_colors.slice(1)\n      });\n    }));\n  }\n\n  handle_hover(e, data) {\n    if (data.length == 0) {\n      return;\n    }\n\n    var hover_y = e['layerY'];\n    var others = data.map(x => [x['_model']['y']]); // now find the index in others that hover_x, hover_y is closest to\n\n    var min_idx = 0;\n    var min_dist = Math.abs(hover_y - others[0]);\n\n    for (var i = 0; i < others.length; i++) {\n      var dist = Math.abs(hover_y - others[i]);\n\n      if (dist < min_dist) {\n        min_idx = i;\n        min_dist = dist;\n      }\n    }\n\n    var player_id = this.state.datasets[min_idx]['player_id']; // var player_name = this.state.datasets[min_idx]['player_name']\n    // console.log(player_name)\n\n    var date = this.state.datasets[min_idx]['dates'][data[0]['_index']];\n    this.fetch_significant_matches(player_id, date); // . then...\n  }\n\n  render() {\n    const datasets = this.state.datasets.map(x => x['data']);\n    var max_ticks;\n    var diff = this.state.end_age - this.state.start_age;\n\n    if (diff > 5) {\n      max_ticks = Math.floor(diff);\n    } else {\n      max_ticks = 10;\n    }\n\n    const options = {\n      scales: {\n        yAxes: [{\n          scaleLabel: {\n            labelString: \"Ranking\",\n            display: true\n          }\n        }],\n        xAxes: [{\n          scaleLabel: {\n            labelString: \"Age\",\n            display: true\n          },\n          ticks: {\n            maxTicksLimit: max_ticks,\n            autoSkip: true,\n            callback: function (value, index, values) {\n              var get_month = val => {\n                val = val - Math.floor(val);\n                return Math.ceil(12 * val);\n              };\n\n              if (diff > 5) {\n                return Math.floor(value).toString();\n              } else {\n                var mo = get_month(value);\n\n                if (mo == 0) {\n                  return Math.floor(value).toString();\n                } else {\n                  return Math.floor(value).toString() + \".\" + mo.toString();\n                }\n              }\n            }\n          }\n        }]\n      },\n      tooltips: {\n        mode: 'nearest'\n      },\n      onHover: (e, data) => this.handle_hover(e, data)\n    };\n    const data = {\n      labels: this.state.labels,\n      datasets: datasets\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, React.createElement(Line, {\n      data: data,\n      options: options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }));\n  }\n\n}\n\nGraph.colors = ['rgb(76, 128, 24, 1)', 'rgb(24, 76, 128, 1)', 'rgb(128, 24, 128, 1)', 'rgb(216, 12, 12, 1)', 'rgb(225, 122, 19, 1)', 'rgb(19, 225, 225, 1)', 'rgb(68, 97, 39, 1)', 'rgb(97, 39, 39, 1)'];\nexport default Graph;","map":{"version":3,"sources":["/Users/ovidiufritsch/code/tennis_atp/atp_frontend/src/components/AgeComparison/Graph.js"],"names":["React","Line","Graph","Component","constructor","props","state","datasets","labels","get_labels","start_age","end_age","available_colors","colors","start_yr","end_yr","start","push","generate_color","o","Math","round","r","random","s","create_dataset","ranks","dates","player_name","player_id","color","res","data","my_id","label","spanGaps","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","fetch_ranking_history","p_id","e","endpt","fetch","fetch_significant_matches","date","date1","add_weeks","date2","subtract_weeks","changeAgeRange","val","min_max","old_colors","map","x","player_ids","player_names","new_datasets","end","new_labels","request","idx","length","setState","response","json","values","pad_ranks","padded_ranks","padded_dates","new_dataset","removePlayer","new_available_colors","i","unshift","filter","get_color","new_ranks","Array","max","new_dates","floor","console","log","abs","min","addPlayer","includes","promise","then","slice","handle_hover","hover_y","others","min_idx","min_dist","dist","render","max_ticks","diff","options","scales","yAxes","scaleLabel","labelString","display","xAxes","ticks","maxTicksLimit","autoSkip","callback","value","index","get_month","ceil","toString","mo","tooltips","mode","onHover"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nclass Graph extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tdatasets: [],\n\t\t\tlabels: this.get_labels(20, 30),\n\t\t\tstart_age: 20,\n\t\t\tend_age: 30,\n\t\t\tavailable_colors: Graph.colors\n\t\t}\n\t}\n\n\tget_labels(start_yr, end_yr) {\n\t\tif (start_yr >= end_yr) {\n\t\t\treturn []\n\t\t}\n\t\tvar start = start_yr + (1/96)\n\t\tvar labels = []\n\t\twhile (start <= end_yr) {\n\t\t\tlabels.push(start)\n\t\t\tstart = start + (1/96)\n\t\t}\n\t\treturn labels\n\t}\n\n\tstatic colors = [\n\t\t'rgb(76, 128, 24, 1)',\n\t\t'rgb(24, 76, 128, 1)',\n\t\t'rgb(128, 24, 128, 1)',\n\t\t'rgb(216, 12, 12, 1)',\n\t\t'rgb(225, 122, 19, 1)',\n\t\t'rgb(19, 225, 225, 1)',\n\t\t'rgb(68, 97, 39, 1)',\n\t\t'rgb(97, 39, 39, 1)'\n\t]\n\n\tgenerate_color() {\n\t\tvar o = Math.round, r = Math.random, s = 255;\n\t\treturn 'rgba(' + o(r()*s) + ',' + o(r()*s) + ',' + o(r()*s) + ',' + 1 + ')';\n\t}\n\n\tcreate_dataset(ranks, dates, player_name, player_id, color) {\n\t\tvar res =\n\t\t{\n\t\t\tdata: {\n\t\t\t\tmy_id: player_id,\n\t\t\t\tlabel: player_name,\n\t\t\t\tspanGaps: true,\n\t\t\t\tfill: false,\n\t\t\t\tlineTension: 0.1,\n\t\t\t\tbackgroundColor: color,\n\t\t\t\tborderColor: color,\n\t\t\t\tborderCapStyle: 'butt',\n\t\t\t\tborderDash: [],\n\t\t\t\tborderDashOffset: 0.0,\n\t\t\t\tborderJoinStyle: 'miter',\n\t\t\t\tpointBorderColor: color,\n\t\t\t\tpointBackgroundColor: '#fff',\n\t\t\t\tpointBorderWidth: 1,\n\t\t\t\tpointHoverRadius: 5,\n\t\t\t\tpointHoverBackgroundColor: color,\n\t\t\t\tpointHoverBorderColor: 'rgba(220,220,220,1)',\n\t\t\t\tpointHoverBorderWidth: 2,\n\t\t\t\tpointRadius: 1,\n\t\t\t\tpointHitRadius: 10,\n\t\t\t\tdata: ranks,\n\t\t\t},\n\t\t\tdates: dates,\n\t\t\tplayer_id: player_id,\n\t\t\tplayer_name: player_name\n\t\t}\n\n\t\treturn res\n\t}\n\n\t// http GET to flask api to fetch ranking history of player with id=p_id between ages of s and e\n\tfetch_ranking_history(p_id, s, e) {\n\t\tvar endpt = `/get_ranking_history?player_id=${p_id}&starting_age=${s}&ending_age=${e}`\n\t\treturn fetch(endpt)\n\t}\n\n\t// http GET to flask api to fetch significant matches for this player at this age\n\tfetch_significant_matches(p_id, date) {\n\t\tvar date1 = add_weeks(date, 1)\n\t\tvar date2 = subtract_weeks(date, 1)\n\t\tvar endpt = `/get_significant_matches?player_id=${p_id}`\n\t}\n\n\tchangeAgeRange(val, min_max) {\n\t\t// if any part of the interval of the new range is in the old range,\n\t\t// then we don't necessarily need to refetch this data. but for now\n\t\t// to keep things simple, just refetch everything\n\t\tvar old_colors = this.state.datasets.map(x => x['data']['backgroundColor'])\n\t\tvar player_ids = this.state.datasets.map(x => x['player_id'])\n\t\tvar player_names = this.state.datasets.map(x => x['player_name'])\n\t\tvar new_datasets = [];\n\t\tvar start = this.state.start_age\n\t\tvar end = this.state.end_age\n\t\tif (min_max == \"max\") {\n\t\t\tend = val\n\t\t} else {\n\t\t\tstart = val\n\t\t}\n\t\tvar new_labels = this.get_labels(start, end)\n\n\t\tconst request = async(idx) => {\n\t\t\tif (idx >= player_ids.length) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tdatasets: new_datasets,\n\t\t\t\t\tlabels: new_labels,\n\t\t\t\t\tstart_age: start,\n\t\t\t\t\tend_age: end\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\t\t\tvar endpt = `/get_ranking_history?player_id=${player_ids[idx]}&starting_age=${start}&ending_age=${end}`\n\t\t\tconst response = await fetch(endpt);\n\t\t\tconst data = await response.json();\n\t\t\tvar dates = data['data'].map(x => x['date'])\n\t\t\tvar ranks = data['data'].map(x => x['rank'])\n\t\t\tvar labels = data['data'].map(x => x['age'])\n\t\t\tvar values = this.pad_ranks(ranks, dates, labels, start, end)\n\t\t\tvar padded_ranks = values[0]\n\t\t\tvar padded_dates = values[1]\n\t\t\tvar new_dataset = this.create_dataset(padded_ranks, padded_dates, player_names[idx], player_ids[idx], old_colors[idx])\n\t\t\tnew_datasets.push(new_dataset)\n\t\t\trequest(idx + 1)\n\t\t}\n\n\t\trequest(0)\n\t}\n\n\tremovePlayer(player_id) {\n\t\tvar new_available_colors = this.state.available_colors;\n\t\tfor (var i = 0; i < this.state.datasets.length; i++) {\n\t\t\tif (this.state.datasets[i]['player_id'] === player_id) {\n\t\t\t\tnew_available_colors.unshift(this.state.datasets[i]['data']['backgroundColor'])\n\t\t\t}\n\t\t}\n\n\t\t// set the new labels to be the labels of maximum length without the one that's being removed\n\t\t// we don't store all the other labels though...\n\n\t\tthis.setState({\n\t\t\tdatasets: this.state.datasets.filter(x => x['player_id'] !== player_id),\n\t\t\tavailable_colors: new_available_colors\n\t\t})\n\t}\n\n\tget_color() {\n\t\tvar color;\n\t\tif (this.state.available_colors.length == 0) {\n\t\t\treturn this.generate_color()\n\t\t}\n\t\treturn this.state.available_colors[0]\n\t}\n\n\tpad_ranks(ranks, dates, labels, start, end) {\n\t\tvar new_ranks = Array(Math.max(end - start, 0) * 96).fill(null)\n\t\tvar new_dates = Array(Math.max(end - start, 0) * 96).fill(null)\n\t\tfor (var i = 0; i < labels.length; i++) {\n\t\t\tif (labels[i] < start || labels[i] > end) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tvar idx = Math.floor((labels[i] - start) / (1/96))\n\t\t\tnew_dates[idx] = dates[i]\n\t\t\tif (new_ranks[idx] === null) {\n\t\t\t\tnew_ranks[idx] = ranks[i]\n\t\t\t} else {\n\t\t\t\tconsole.log(Math.abs(new_ranks[idx] - ranks[i]))\n\t\t\t\tnew_ranks[idx] = Math.min(new_ranks[idx], ranks[i])\n\t\t\t}\n\t\t}\n\t\treturn [new_ranks, new_dates]\n\t}\n\n\taddPlayer(player_id, player_name) {\n\n\t\t// first check to see if this player has already been added\n\t\tif (this.state.datasets.map(x => x['player_id']).includes(player_id)) {\n\t\t\treturn\n\t\t}\n\n\t\tvar promise = this.fetch_ranking_history(player_id, this.state.start_age, this.state.end_age)\n\t\tpromise.then(response => response.json().then(data => {\n\t\t\tvar ranks = data['data'].map(x => x['rank'])\n\t\t\tvar dates = data['data'].map(x => x['date'])\n\t\t\tvar labels = data['data'].map(x => x['age'])\n\t\t\tvar values = this.pad_ranks(ranks, dates, labels, this.state.start_age, this.state.end_age)\n\t\t\tvar padded_ranks = values[0]\n\t\t\tvar padded_dates = values[1]\n\t\t\tvar color = this.get_color()\n\t\t\tvar new_dataset = this.create_dataset(padded_ranks, padded_dates, player_name, player_id, color)\n\t\t\tthis.setState({\n\t\t\t\tdatasets: [...this.state.datasets, new_dataset],\n\t\t\t\tavailable_colors: this.state.available_colors.slice(1)\n\t\t\t})\n\t\t}))\n\t}\n\n\thandle_hover(e, data) {\n\t\tif (data.length == 0) {\n\t\t\treturn\n\t\t}\n\t\tvar hover_y = e['layerY']\n\t\tvar others = data.map(x => [x['_model']['y']])\n\t\t\n\t\t// now find the index in others that hover_x, hover_y is closest to\n\t\tvar min_idx = 0\n\t\tvar min_dist = Math.abs(hover_y - others[0])\n\t\tfor (var i = 0; i < others.length; i++) {\n\t\t\tvar dist = Math.abs(hover_y - others[i])\n\t\t\tif (dist < min_dist) {\n\t\t\t\tmin_idx = i;\n\t\t\t\tmin_dist = dist\n\t\t\t}\n\t\t}\n\t\tvar player_id = this.state.datasets[min_idx]['player_id']\n\t\t// var player_name = this.state.datasets[min_idx]['player_name']\n\t\t// console.log(player_name)\n\t\tvar date = this.state.datasets[min_idx]['dates'][data[0]['_index']]\n\t\tthis.fetch_significant_matches(player_id, date)\n\t\t// . then...\n\t}\n\n\trender() {\n\n\t\tconst datasets = this.state.datasets.map(x => x['data'])\n\n\t\tvar max_ticks;\n\t\tvar diff = this.state.end_age - this.state.start_age\n\t\tif (diff > 5) {\n\t\t\tmax_ticks = Math.floor(diff)\n\t\t} else {\n\t\t\tmax_ticks = 10\n\t\t}\n\n\t\tconst options = {\n\t\t\tscales: {\n\t\t\t\tyAxes: [{\n\t\t\t\t\tscaleLabel: {\n\t\t\t\t\t\tlabelString: \"Ranking\",\n\t\t\t\t\t\tdisplay: true\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t\txAxes: [{\n\t\t\t\t\tscaleLabel: {\n\t\t\t\t\t\tlabelString: \"Age\",\n\t\t\t\t\t\tdisplay: true\n\t\t\t\t\t},\n\t\t\t\t\tticks: {\n\t\t\t\t\t\tmaxTicksLimit: max_ticks,\n\t\t\t\t\t\tautoSkip: true,\n\t\t\t\t\t\tcallback: function(value, index, values) {\n\n\t\t\t\t\t\t\tvar get_month = (val) => {\n\t\t\t\t\t\t\t\tval = val - Math.floor(val)\n\t\t\t\t\t\t\t\treturn Math.ceil(12 * val)\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (diff > 5) {\n\t\t\t\t\t\t\t\treturn Math.floor(value).toString()\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvar mo = get_month(value)\n\t\t\t\t\t\t\t\tif (mo == 0) {\n\t\t\t\t\t\t\t\t\treturn Math.floor(value).toString()\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn Math.floor(value).toString() + \".\" + mo.toString()\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t},\n\n\t\t\ttooltips: {\n\t\t\t\tmode: 'nearest'\n\t\t\t},\n\n\t\t\tonHover: (e, data) => this.handle_hover(e, data)\n\t\t}\n\n\t\tconst data = {\n\t\t\tlabels: this.state.labels,\n\t\t\tdatasets: datasets\n\t\t};\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Line\n\t\t\t\t\tdata={data}\n\t\t\t\t\toptions={options}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}