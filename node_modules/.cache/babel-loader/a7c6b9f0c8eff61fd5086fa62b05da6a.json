{"ast":null,"code":"var _jsxFileName = \"/Users/ovidiufritsch/code/tennis_atp/atp_frontend/src/components/AgeComparison/Graph.js\";\nimport React from 'react';\nimport ChartComponent, { Chart, Line } from 'react-chartjs-2';\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      datasets: [],\n      labels: this.get_labels(20, 30),\n      start_age: 20,\n      end_age: 30,\n      available_colors: Graph.colors,\n      highlight_data_idx: -1,\n      highlight_idx1: 0,\n      highlight_idx2: 0\n    };\n  }\n\n  get_labels(start_yr, end_yr) {\n    if (start_yr >= end_yr) {\n      return [];\n    }\n\n    var start = start_yr + 1 / 96;\n    var labels = [];\n\n    while (start <= end_yr) {\n      labels.push(start);\n      start = start + 1 / 96;\n    }\n\n    return labels;\n  }\n\n  generate_color() {\n    var o = Math.round,\n        r = Math.random,\n        s = 255;\n    return 'rgba(' + o(r() * s) + ',' + o(r() * s) + ',' + o(r() * s) + ',' + 1 + ')';\n  }\n\n  create_dataset(ranks, dates, player_name, player_id, color) {\n    var res = {\n      data: {\n        my_id: player_id,\n        label: player_name,\n        spanGaps: true,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: color,\n        borderColor: color,\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: color,\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 4,\n        pointHoverRadius: 7,\n        pointHoverBackgroundColor: color,\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 1,\n        pointRadius: 1,\n        pointHitRadius: 1,\n        data: ranks\n      },\n      dates: dates,\n      player_id: player_id,\n      player_name: player_name\n    };\n    return res;\n  } // http GET to flask api to fetch ranking history of player with id=p_id between ages of s and e\n\n\n  fetch_ranking_history(p_id, s, e) {\n    var endpt = \"/get_ranking_history?player_id=\".concat(p_id, \"&starting_age=\").concat(s, \"&ending_age=\").concat(e);\n    return fetch(endpt);\n  } // http GET to flask api to fetch significant matches for this player at this age\n\n\n  fetch_significant_matches(p_id, date1, date2) {\n    // const sub_weeks = (date, N) => {\n    // \tif (N == 0) {\n    // \t\treturn date\n    // \t}\n    // \tvar year = date['yr']\n    // \tvar mo = date['mo']\n    // \tvar day = date['day']\n    // \tif (day - 7 >= 1) {\n    // \t\tday = day - 7\n    // \t\treturn sub_weeks({'yr': year, 'mo':mo, 'day':day}, N - 1)\n    // \t}\n    // \tday = 30 - (7 - day)\n    // \tmo -= 1\n    // \tif (mo == 2 && day >= 29) {\n    // \t\tday = 28\n    // \t}\n    // \tif (mo == 0) {\n    // \t\tmo = 12\n    // \t\tyear -= 1\n    // \t}\n    // \treturn sub_weeks({'yr': year, 'mo':mo, 'day':day}, N - 1)\n    // }\n    const date_str = date => {\n      var mo;\n      var day;\n      var yr = date['yr'];\n\n      if (date['mo'] < 10) {\n        mo = \"0\" + date['mo'].toString();\n      } else {\n        mo = date['mo'].toString();\n      }\n\n      if (date['day'] < 10) {\n        day = \"0\" + date['day'].toString();\n      } else {\n        day = date['day'].toString();\n      }\n\n      var res = yr + mo + day;\n      return res;\n    };\n\n    date1 = date_str(date1);\n    date2 = date_str(date2);\n    var endpt = \"/get_significant_matches?player_id=\".concat(p_id, \"&date1=\").concat(date1, \"&date2=\").concat(date2);\n    return fetch(endpt);\n  }\n\n  changeAgeRange(val, min_max) {\n    // if any part of the interval of the new range is in the old range,\n    // then we don't necessarily need to refetch this data. but for now\n    // to keep things simple, just refetch everything\n    var old_colors = this.state.datasets.map(x => x['data']['backgroundColor']);\n    var player_ids = this.state.datasets.map(x => x['player_id']);\n    var player_names = this.state.datasets.map(x => x['player_name']);\n    var new_datasets = [];\n    var start = this.state.start_age;\n    var end = this.state.end_age;\n\n    if (min_max == \"max\") {\n      end = val;\n    } else {\n      start = val;\n    }\n\n    var new_labels = this.get_labels(start, end);\n\n    const request = async idx => {\n      if (idx >= player_ids.length) {\n        this.setState({\n          datasets: new_datasets,\n          labels: new_labels,\n          start_age: start,\n          end_age: end\n        });\n        return;\n      }\n\n      var endpt = \"/get_ranking_history?player_id=\".concat(player_ids[idx], \"&starting_age=\").concat(start, \"&ending_age=\").concat(end);\n      const response = await fetch(endpt);\n      const data = await response.json();\n      var dates = data['data'].map(x => x['date']);\n      var ranks = data['data'].map(x => x['rank']);\n      var labels = data['data'].map(x => x['age']);\n      var values = this.pad_ranks(ranks, dates, labels, start, end);\n      var padded_ranks = values[0];\n      var padded_dates = values[1];\n      var new_dataset = this.create_dataset(padded_ranks, padded_dates, player_names[idx], player_ids[idx], old_colors[idx]);\n      new_datasets.push(new_dataset);\n      request(idx + 1);\n    };\n\n    request(0);\n  }\n\n  removePlayer(player_id) {\n    var new_available_colors = this.state.available_colors;\n\n    for (var i = 0; i < this.state.datasets.length; i++) {\n      if (this.state.datasets[i]['player_id'] === player_id) {\n        new_available_colors.unshift(this.state.datasets[i]['data']['backgroundColor']);\n      }\n    }\n\n    this.setState({\n      datasets: this.state.datasets.filter(x => x['player_id'] !== player_id),\n      available_colors: new_available_colors\n    });\n  }\n\n  get_color() {\n    var color;\n\n    if (this.state.available_colors.length == 0) {\n      return this.generate_color();\n    }\n\n    return this.state.available_colors[0];\n  }\n\n  pad_ranks(ranks, dates, labels, start, end) {\n    var new_ranks = Array(Math.max(end - start, 0) * 96).fill(null);\n    var new_dates = Array(Math.max(end - start, 0) * 96).fill(null);\n\n    for (var i = 0; i < labels.length; i++) {\n      if (labels[i] < start || labels[i] > end) {\n        continue;\n      }\n\n      var idx = Math.floor((labels[i] - start) / (1 / 96));\n      new_dates[idx] = dates[i];\n\n      if (new_ranks[idx] === null) {\n        new_ranks[idx] = ranks[i];\n      } else {\n        new_ranks[idx] = Math.min(new_ranks[idx], ranks[i]);\n      }\n    }\n\n    return [new_ranks, new_dates];\n  }\n\n  addPlayer(player_id, player_name) {\n    // first check to see if this player has already been added\n    if (this.state.datasets.map(x => x['player_id']).includes(player_id)) {\n      return;\n    }\n\n    var promise = this.fetch_ranking_history(player_id, this.state.start_age, this.state.end_age);\n    promise.then(response => response.json().then(data => {\n      var ranks = data['data'].map(x => x['rank']);\n      var dates = data['data'].map(x => x['date']);\n      var labels = data['data'].map(x => x['age']);\n      var values = this.pad_ranks(ranks, dates, labels, this.state.start_age, this.state.end_age);\n      var padded_ranks = values[0];\n      var padded_dates = values[1];\n      var color = this.get_color();\n      var new_dataset = this.create_dataset(padded_ranks, padded_dates, player_name, player_id, color);\n      this.setState({\n        datasets: [...this.state.datasets, new_dataset],\n        available_colors: this.state.available_colors.slice(1)\n      });\n    }));\n  }\n\n  collinear(x1, y1, x2, y2, x3, y3) {\n    return Math.abs((y1 - y2) * (x1 - x3) - (y1 - y3) * (x1 - x2));\n  } // \n  // such that these x and y coordinates are collinear with those\n\n  /*\n  find (if any) the two consecutive data points in any of the datasets\n  such that these x and y coordinates are collinear with those point\n  AND x lies beteen p1.x and p2.x.\n  if none, return null\n  */\n\n\n  get_segment_intersection(chart, x, y) {\n    var e1 = 1; // slack for x\n\n    var e2 = 500; // slack for collineariy measure\n\n    for (var i = 0; i < this.state.datasets.length; i++) {\n      var nodes = chart.getDatasetMeta(i)['data'];\n      nodes = nodes.filter(x => x['_model']['skip'] == false);\n\n      for (var j = 0; j < nodes.length - 1; j++) {\n        var start_x = nodes[j]['_model']['x'];\n        var start_y = nodes[j]['_model']['y'];\n        var end_x = nodes[j + 1]['_model']['x'];\n        var end_y = nodes[j + 1]['_model']['y'];\n\n        if (x < start_x - e1 || x > end_x + e1) {\n          continue;\n        }\n\n        var collinearity = this.collinear(x, y, start_x, start_y, end_x, end_y);\n\n        if (collinearity < e2) {\n          return {\n            'data_idx': nodes[j]['_datasetIndex'],\n            'i1': nodes[j]['_index'],\n            'i2': nodes[j + 1]['_index']\n          };\n        }\n      }\n    }\n\n    return null;\n  }\n\n  highlight_segment(data_idx, i1, i2) {\n    this.setState({\n      highlight_data_idx: data_idx,\n      highlight_idx1: i1,\n      highlight_idx2: i2\n    });\n  }\n\n  handle_hover(e, data) {\n    var chart = this.refs['graph']['chartInstance'];\n    var x_pos = e['layerX'];\n    var y_pos = e['layerY'];\n    var indices = this.get_segment_intersection(chart, x_pos, y_pos);\n\n    if (indices === null) {\n      if (this.state.highlight_data_idx !== -1) {\n        this.setState({\n          highlight_data_idx: -1,\n          highlight_idx1: 0,\n          highlight_idx2: 0\n        });\n      }\n\n      return;\n    }\n\n    this.highlight_segment(indices['data_idx'], indices['i1'], indices['i2']);\n    this.fetch_and_process_match_data(indices['data_idx'], indices['i1'], indices['i2']);\n  }\n\n  fetch_and_process_match_data(data_idx, i1, i2) {\n    var player_id = this.state.datasets[data_idx]['player_id'];\n    var left_date = this.state.datasets[data_idx]['dates'][i1];\n    var right_date = this.state.datasets[data_idx]['dates'][i2];\n  }\n\n  handle_hover2(e, data) {\n    var g = this.refs['graph']['chartInstance'];\n\n    if (data.length == 0) {\n      return;\n    }\n\n    var data_idx = g.getElementAtEvent(e)[0]['_datasetIndex'];\n    var target_dataset = this.state.datasets[data_idx];\n    var player_id = target_dataset['player_id'];\n    var player_name = target_dataset['player_name'];\n    var idx = data[0]['_index'];\n    var right_date = target_dataset['dates'][idx]; // get the previous two dates\n\n    var left_date = null;\n    idx -= 1;\n\n    while (idx >= 0) {\n      left_date = target_dataset['dates'][idx];\n\n      if (left_date !== null) {\n        break;\n      }\n\n      idx -= 1;\n    }\n\n    if (left_date === null) {\n      return;\n    }\n\n    var promise = this.fetch_significant_matches(player_id, left_date, right_date);\n    promise.then(response => response.json().then(data => {// console.log(data)\n    }));\n  }\n\n  render() {\n    const datasets = this.state.datasets.map(x => x['data']);\n    var max_ticks;\n    var diff = this.state.end_age - this.state.start_age;\n\n    if (diff > 5) {\n      max_ticks = Math.floor(diff);\n    } else {\n      max_ticks = 10;\n    }\n\n    var g = this.refs['graph'];\n    const options = {\n      scales: {\n        yAxes: [{\n          scaleLabel: {\n            labelString: \"Ranking\",\n            display: true\n          }\n        }],\n        xAxes: [{\n          scaleLabel: {\n            labelString: \"Age\",\n            display: true\n          },\n          ticks: {\n            maxTicksLimit: max_ticks,\n            autoSkip: true,\n            callback: function (value, index, values) {\n              var get_month = val => {\n                val = val - Math.floor(val);\n                return Math.ceil(12 * val);\n              };\n\n              if (diff > 5) {\n                return Math.floor(value).toString();\n              } else {\n                var mo = get_month(value);\n\n                if (mo == 0) {\n                  return Math.floor(value).toString();\n                } else {\n                  return Math.floor(value).toString() + \".\" + mo.toString();\n                }\n              }\n            }\n          }\n        }]\n      },\n      tooltips: {\n        mode: 'point',\n        intersect: true\n      },\n      onHover: (e, data) => this.handle_hover(e, data)\n    };\n    const data = {\n      labels: this.state.labels,\n      datasets: datasets\n    };\n    var the_obj = this;\n    Chart.controllers.myLine = Chart.controllers.line.extend({\n      draw: function () {\n        Chart.controllers.line.prototype.draw.apply(this, arguments);\n\n        if (the_obj.state.highlight_data_idx == -1) {\n          return;\n        }\n\n        function setCharAt(str, index, chr) {\n          if (index > str.length - 1) return str;\n          return str.substr(0, index) + chr + str.substr(index + 1);\n        }\n\n        var meta = this['chart'].getDatasetMeta(the_obj.state.highlight_data_idx);\n        var ctx = this.chart.ctx;\n        var color = meta['dataset']['_model']['borderColor'];\n        ctx.strokeStyle = color.substr(0, color.length - 2) + \"0.3)\";\n        ctx.lineWidth = 8;\n        ctx.beginPath();\n        var point1 = meta['data'][the_obj.state.highlight_idx1];\n        ctx.moveTo(point1['_model']['x'], point1['_model']['y']);\n        var point2 = meta['data'][the_obj.state.highlight_idx2];\n        ctx.bezierCurveTo(point1['_model']['x'], point1['_model']['y'], point1['_model']['controlPointNextX'], point1['_model']['controlPointNextY'], point2['_model']['x'], point2['_model']['y']);\n        ctx.stroke();\n      }\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }, React.createElement(ChartComponent, {\n      type: \"myLine\",\n      ref: \"graph\",\n      data: data,\n      options: options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }));\n  }\n\n}\n\nGraph.colors = ['rgb(76, 128, 24, 1)', 'rgb(24, 76, 128, 1)', 'rgb(128, 24, 128, 1)', 'rgb(216, 12, 12, 1)', 'rgb(225, 122, 19, 1)', 'rgb(19, 225, 225, 1)', 'rgb(68, 97, 39, 1)', 'rgb(97, 39, 39, 1)'];\nexport default Graph;","map":{"version":3,"sources":["/Users/ovidiufritsch/code/tennis_atp/atp_frontend/src/components/AgeComparison/Graph.js"],"names":["React","ChartComponent","Chart","Line","Graph","Component","constructor","props","state","datasets","labels","get_labels","start_age","end_age","available_colors","colors","highlight_data_idx","highlight_idx1","highlight_idx2","start_yr","end_yr","start","push","generate_color","o","Math","round","r","random","s","create_dataset","ranks","dates","player_name","player_id","color","res","data","my_id","label","spanGaps","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","fetch_ranking_history","p_id","e","endpt","fetch","fetch_significant_matches","date1","date2","date_str","date","mo","day","yr","toString","changeAgeRange","val","min_max","old_colors","map","x","player_ids","player_names","new_datasets","end","new_labels","request","idx","length","setState","response","json","values","pad_ranks","padded_ranks","padded_dates","new_dataset","removePlayer","new_available_colors","i","unshift","filter","get_color","new_ranks","Array","max","new_dates","floor","min","addPlayer","includes","promise","then","slice","collinear","x1","y1","x2","y2","x3","y3","abs","get_segment_intersection","chart","y","e1","e2","nodes","getDatasetMeta","j","start_x","start_y","end_x","end_y","collinearity","highlight_segment","data_idx","i1","i2","handle_hover","refs","x_pos","y_pos","indices","fetch_and_process_match_data","left_date","right_date","handle_hover2","g","getElementAtEvent","target_dataset","render","max_ticks","diff","options","scales","yAxes","scaleLabel","labelString","display","xAxes","ticks","maxTicksLimit","autoSkip","callback","value","index","get_month","ceil","tooltips","mode","intersect","onHover","the_obj","controllers","myLine","line","extend","draw","prototype","apply","arguments","setCharAt","str","chr","substr","meta","ctx","strokeStyle","lineWidth","beginPath","point1","moveTo","point2","bezierCurveTo","stroke"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,IAAwBC,KAAxB,EAA+BC,IAA/B,QAA0C,iBAA1C;;AAEA,MAAMC,KAAN,SAAoBJ,KAAK,CAACK,SAA1B,CAAoC;AACnCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,QAAQ,EAAE,EADE;AAEZC,MAAAA,MAAM,EAAE,KAAKC,UAAL,CAAgB,EAAhB,EAAoB,EAApB,CAFI;AAGZC,MAAAA,SAAS,EAAE,EAHC;AAIZC,MAAAA,OAAO,EAAE,EAJG;AAKZC,MAAAA,gBAAgB,EAAEV,KAAK,CAACW,MALZ;AAMZC,MAAAA,kBAAkB,EAAE,CAAC,CANT;AAOZC,MAAAA,cAAc,EAAE,CAPJ;AAQZC,MAAAA,cAAc,EAAE;AARJ,KAAb;AAUA;;AAEDP,EAAAA,UAAU,CAACQ,QAAD,EAAWC,MAAX,EAAmB;AAC5B,QAAID,QAAQ,IAAIC,MAAhB,EAAwB;AACvB,aAAO,EAAP;AACA;;AACD,QAAIC,KAAK,GAAGF,QAAQ,GAAI,IAAE,EAA1B;AACA,QAAIT,MAAM,GAAG,EAAb;;AACA,WAAOW,KAAK,IAAID,MAAhB,EAAwB;AACvBV,MAAAA,MAAM,CAACY,IAAP,CAAYD,KAAZ;AACAA,MAAAA,KAAK,GAAGA,KAAK,GAAI,IAAE,EAAnB;AACA;;AACD,WAAOX,MAAP;AACA;;AAaDa,EAAAA,cAAc,GAAG;AAChB,QAAIC,CAAC,GAAGC,IAAI,CAACC,KAAb;AAAA,QAAoBC,CAAC,GAAGF,IAAI,CAACG,MAA7B;AAAA,QAAqCC,CAAC,GAAG,GAAzC;AACA,WAAO,UAAUL,CAAC,CAACG,CAAC,KAAGE,CAAL,CAAX,GAAqB,GAArB,GAA2BL,CAAC,CAACG,CAAC,KAAGE,CAAL,CAA5B,GAAsC,GAAtC,GAA4CL,CAAC,CAACG,CAAC,KAAGE,CAAL,CAA7C,GAAuD,GAAvD,GAA6D,CAA7D,GAAiE,GAAxE;AACA;;AAEDC,EAAAA,cAAc,CAACC,KAAD,EAAQC,KAAR,EAAeC,WAAf,EAA4BC,SAA5B,EAAuCC,KAAvC,EAA8C;AAC3D,QAAIC,GAAG,GACP;AACCC,MAAAA,IAAI,EAAE;AACLC,QAAAA,KAAK,EAAEJ,SADF;AAELK,QAAAA,KAAK,EAAEN,WAFF;AAGLO,QAAAA,QAAQ,EAAE,IAHL;AAILC,QAAAA,IAAI,EAAE,KAJD;AAKLC,QAAAA,WAAW,EAAE,GALR;AAMLC,QAAAA,eAAe,EAAER,KANZ;AAOLS,QAAAA,WAAW,EAAET,KAPR;AAQLU,QAAAA,cAAc,EAAE,MARX;AASLC,QAAAA,UAAU,EAAE,EATP;AAULC,QAAAA,gBAAgB,EAAE,GAVb;AAWLC,QAAAA,eAAe,EAAE,OAXZ;AAYLC,QAAAA,gBAAgB,EAAEd,KAZb;AAaLe,QAAAA,oBAAoB,EAAE,MAbjB;AAcLC,QAAAA,gBAAgB,EAAE,CAdb;AAeLC,QAAAA,gBAAgB,EAAE,CAfb;AAgBLC,QAAAA,yBAAyB,EAAElB,KAhBtB;AAiBLmB,QAAAA,qBAAqB,EAAE,qBAjBlB;AAkBLC,QAAAA,qBAAqB,EAAE,CAlBlB;AAmBLC,QAAAA,WAAW,EAAE,CAnBR;AAoBLC,QAAAA,cAAc,EAAE,CApBX;AAqBLpB,QAAAA,IAAI,EAAEN;AArBD,OADP;AAwBCC,MAAAA,KAAK,EAAEA,KAxBR;AAyBCE,MAAAA,SAAS,EAAEA,SAzBZ;AA0BCD,MAAAA,WAAW,EAAEA;AA1Bd,KADA;AA8BA,WAAOG,GAAP;AACA,GA5EkC,CA8EnC;;;AACAsB,EAAAA,qBAAqB,CAACC,IAAD,EAAO9B,CAAP,EAAU+B,CAAV,EAAa;AACjC,QAAIC,KAAK,4CAAqCF,IAArC,2BAA0D9B,CAA1D,yBAA0E+B,CAA1E,CAAT;AACA,WAAOE,KAAK,CAACD,KAAD,CAAZ;AACA,GAlFkC,CAoFnC;;;AACAE,EAAAA,yBAAyB,CAACJ,IAAD,EAAOK,KAAP,EAAcC,KAAd,EAAqB;AAE7C;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA,UAAMC,QAAQ,GAAIC,IAAD,IAAU;AAC1B,UAAIC,EAAJ;AACA,UAAIC,GAAJ;AACA,UAAIC,EAAE,GAAGH,IAAI,CAAC,IAAD,CAAb;;AACA,UAAIA,IAAI,CAAC,IAAD,CAAJ,GAAa,EAAjB,EAAqB;AACpBC,QAAAA,EAAE,GAAG,MAAMD,IAAI,CAAC,IAAD,CAAJ,CAAWI,QAAX,EAAX;AACA,OAFD,MAEM;AACLH,QAAAA,EAAE,GAAGD,IAAI,CAAC,IAAD,CAAJ,CAAWI,QAAX,EAAL;AACA;;AACD,UAAIJ,IAAI,CAAC,KAAD,CAAJ,GAAc,EAAlB,EAAqB;AACpBE,QAAAA,GAAG,GAAG,MAAMF,IAAI,CAAC,KAAD,CAAJ,CAAYI,QAAZ,EAAZ;AACA,OAFD,MAEO;AACNF,QAAAA,GAAG,GAAGF,IAAI,CAAC,KAAD,CAAJ,CAAYI,QAAZ,EAAN;AACA;;AACD,UAAInC,GAAG,GAAGkC,EAAE,GAAGF,EAAL,GAAUC,GAApB;AACA,aAAOjC,GAAP;AACA,KAhBD;;AAkBA4B,IAAAA,KAAK,GAAGE,QAAQ,CAACF,KAAD,CAAhB;AACAC,IAAAA,KAAK,GAAGC,QAAQ,CAACD,KAAD,CAAhB;AACA,QAAIJ,KAAK,gDAAyCF,IAAzC,oBAAuDK,KAAvD,oBAAsEC,KAAtE,CAAT;AACA,WAAOH,KAAK,CAACD,KAAD,CAAZ;AACA;;AAEDW,EAAAA,cAAc,CAACC,GAAD,EAAMC,OAAN,EAAe;AAC5B;AACA;AACA;AACA,QAAIC,UAAU,GAAG,KAAKnE,KAAL,CAAWC,QAAX,CAAoBmE,GAApB,CAAwBC,CAAC,IAAIA,CAAC,CAAC,MAAD,CAAD,CAAU,iBAAV,CAA7B,CAAjB;AACA,QAAIC,UAAU,GAAG,KAAKtE,KAAL,CAAWC,QAAX,CAAoBmE,GAApB,CAAwBC,CAAC,IAAIA,CAAC,CAAC,WAAD,CAA9B,CAAjB;AACA,QAAIE,YAAY,GAAG,KAAKvE,KAAL,CAAWC,QAAX,CAAoBmE,GAApB,CAAwBC,CAAC,IAAIA,CAAC,CAAC,aAAD,CAA9B,CAAnB;AACA,QAAIG,YAAY,GAAG,EAAnB;AACA,QAAI3D,KAAK,GAAG,KAAKb,KAAL,CAAWI,SAAvB;AACA,QAAIqE,GAAG,GAAG,KAAKzE,KAAL,CAAWK,OAArB;;AACA,QAAI6D,OAAO,IAAI,KAAf,EAAsB;AACrBO,MAAAA,GAAG,GAAGR,GAAN;AACA,KAFD,MAEO;AACNpD,MAAAA,KAAK,GAAGoD,GAAR;AACA;;AACD,QAAIS,UAAU,GAAG,KAAKvE,UAAL,CAAgBU,KAAhB,EAAuB4D,GAAvB,CAAjB;;AAEA,UAAME,OAAO,GAAG,MAAMC,GAAN,IAAc;AAC7B,UAAIA,GAAG,IAAIN,UAAU,CAACO,MAAtB,EAA8B;AAC7B,aAAKC,QAAL,CAAc;AACb7E,UAAAA,QAAQ,EAAEuE,YADG;AAEbtE,UAAAA,MAAM,EAAEwE,UAFK;AAGbtE,UAAAA,SAAS,EAAES,KAHE;AAIbR,UAAAA,OAAO,EAAEoE;AAJI,SAAd;AAMA;AACA;;AACD,UAAIpB,KAAK,4CAAqCiB,UAAU,CAACM,GAAD,CAA/C,2BAAqE/D,KAArE,yBAAyF4D,GAAzF,CAAT;AACA,YAAMM,QAAQ,GAAG,MAAMzB,KAAK,CAACD,KAAD,CAA5B;AACA,YAAMxB,IAAI,GAAG,MAAMkD,QAAQ,CAACC,IAAT,EAAnB;AACA,UAAIxD,KAAK,GAAGK,IAAI,CAAC,MAAD,CAAJ,CAAauC,GAAb,CAAiBC,CAAC,IAAIA,CAAC,CAAC,MAAD,CAAvB,CAAZ;AACA,UAAI9C,KAAK,GAAGM,IAAI,CAAC,MAAD,CAAJ,CAAauC,GAAb,CAAiBC,CAAC,IAAIA,CAAC,CAAC,MAAD,CAAvB,CAAZ;AACA,UAAInE,MAAM,GAAG2B,IAAI,CAAC,MAAD,CAAJ,CAAauC,GAAb,CAAiBC,CAAC,IAAIA,CAAC,CAAC,KAAD,CAAvB,CAAb;AACA,UAAIY,MAAM,GAAG,KAAKC,SAAL,CAAe3D,KAAf,EAAsBC,KAAtB,EAA6BtB,MAA7B,EAAqCW,KAArC,EAA4C4D,GAA5C,CAAb;AACA,UAAIU,YAAY,GAAGF,MAAM,CAAC,CAAD,CAAzB;AACA,UAAIG,YAAY,GAAGH,MAAM,CAAC,CAAD,CAAzB;AACA,UAAII,WAAW,GAAG,KAAK/D,cAAL,CAAoB6D,YAApB,EAAkCC,YAAlC,EAAgDb,YAAY,CAACK,GAAD,CAA5D,EAAmEN,UAAU,CAACM,GAAD,CAA7E,EAAoFT,UAAU,CAACS,GAAD,CAA9F,CAAlB;AACAJ,MAAAA,YAAY,CAAC1D,IAAb,CAAkBuE,WAAlB;AACAV,MAAAA,OAAO,CAACC,GAAG,GAAG,CAAP,CAAP;AACA,KAtBD;;AAuBAD,IAAAA,OAAO,CAAC,CAAD,CAAP;AACA;;AAEDW,EAAAA,YAAY,CAAC5D,SAAD,EAAY;AACvB,QAAI6D,oBAAoB,GAAG,KAAKvF,KAAL,CAAWM,gBAAtC;;AACA,SAAK,IAAIkF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKxF,KAAL,CAAWC,QAAX,CAAoB4E,MAAxC,EAAgDW,CAAC,EAAjD,EAAqD;AACpD,UAAI,KAAKxF,KAAL,CAAWC,QAAX,CAAoBuF,CAApB,EAAuB,WAAvB,MAAwC9D,SAA5C,EAAuD;AACtD6D,QAAAA,oBAAoB,CAACE,OAArB,CAA6B,KAAKzF,KAAL,CAAWC,QAAX,CAAoBuF,CAApB,EAAuB,MAAvB,EAA+B,iBAA/B,CAA7B;AACA;AACD;;AAED,SAAKV,QAAL,CAAc;AACb7E,MAAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWC,QAAX,CAAoByF,MAApB,CAA2BrB,CAAC,IAAIA,CAAC,CAAC,WAAD,CAAD,KAAmB3C,SAAnD,CADG;AAEbpB,MAAAA,gBAAgB,EAAEiF;AAFL,KAAd;AAIA;;AAEDI,EAAAA,SAAS,GAAG;AACX,QAAIhE,KAAJ;;AACA,QAAI,KAAK3B,KAAL,CAAWM,gBAAX,CAA4BuE,MAA5B,IAAsC,CAA1C,EAA6C;AAC5C,aAAO,KAAK9D,cAAL,EAAP;AACA;;AACD,WAAO,KAAKf,KAAL,CAAWM,gBAAX,CAA4B,CAA5B,CAAP;AACA;;AAED4E,EAAAA,SAAS,CAAC3D,KAAD,EAAQC,KAAR,EAAetB,MAAf,EAAuBW,KAAvB,EAA8B4D,GAA9B,EAAmC;AAC3C,QAAImB,SAAS,GAAGC,KAAK,CAAC5E,IAAI,CAAC6E,GAAL,CAASrB,GAAG,GAAG5D,KAAf,EAAsB,CAAtB,IAA2B,EAA5B,CAAL,CAAqCoB,IAArC,CAA0C,IAA1C,CAAhB;AACA,QAAI8D,SAAS,GAAGF,KAAK,CAAC5E,IAAI,CAAC6E,GAAL,CAASrB,GAAG,GAAG5D,KAAf,EAAsB,CAAtB,IAA2B,EAA5B,CAAL,CAAqCoB,IAArC,CAA0C,IAA1C,CAAhB;;AACA,SAAK,IAAIuD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtF,MAAM,CAAC2E,MAA3B,EAAmCW,CAAC,EAApC,EAAwC;AACvC,UAAItF,MAAM,CAACsF,CAAD,CAAN,GAAY3E,KAAZ,IAAqBX,MAAM,CAACsF,CAAD,CAAN,GAAYf,GAArC,EAA0C;AACzC;AACA;;AACD,UAAIG,GAAG,GAAG3D,IAAI,CAAC+E,KAAL,CAAW,CAAC9F,MAAM,CAACsF,CAAD,CAAN,GAAY3E,KAAb,KAAuB,IAAE,EAAzB,CAAX,CAAV;AACAkF,MAAAA,SAAS,CAACnB,GAAD,CAAT,GAAiBpD,KAAK,CAACgE,CAAD,CAAtB;;AACA,UAAII,SAAS,CAAChB,GAAD,CAAT,KAAmB,IAAvB,EAA6B;AAC5BgB,QAAAA,SAAS,CAAChB,GAAD,CAAT,GAAiBrD,KAAK,CAACiE,CAAD,CAAtB;AACA,OAFD,MAEO;AACNI,QAAAA,SAAS,CAAChB,GAAD,CAAT,GAAiB3D,IAAI,CAACgF,GAAL,CAASL,SAAS,CAAChB,GAAD,CAAlB,EAAyBrD,KAAK,CAACiE,CAAD,CAA9B,CAAjB;AACA;AACD;;AACD,WAAO,CAACI,SAAD,EAAYG,SAAZ,CAAP;AACA;;AAEDG,EAAAA,SAAS,CAACxE,SAAD,EAAYD,WAAZ,EAAyB;AAEjC;AACA,QAAI,KAAKzB,KAAL,CAAWC,QAAX,CAAoBmE,GAApB,CAAwBC,CAAC,IAAIA,CAAC,CAAC,WAAD,CAA9B,EAA6C8B,QAA7C,CAAsDzE,SAAtD,CAAJ,EAAsE;AACrE;AACA;;AAED,QAAI0E,OAAO,GAAG,KAAKlD,qBAAL,CAA2BxB,SAA3B,EAAsC,KAAK1B,KAAL,CAAWI,SAAjD,EAA4D,KAAKJ,KAAL,CAAWK,OAAvE,CAAd;AACA+F,IAAAA,OAAO,CAACC,IAAR,CAAatB,QAAQ,IAAIA,QAAQ,CAACC,IAAT,GAAgBqB,IAAhB,CAAqBxE,IAAI,IAAI;AACrD,UAAIN,KAAK,GAAGM,IAAI,CAAC,MAAD,CAAJ,CAAauC,GAAb,CAAiBC,CAAC,IAAIA,CAAC,CAAC,MAAD,CAAvB,CAAZ;AACA,UAAI7C,KAAK,GAAGK,IAAI,CAAC,MAAD,CAAJ,CAAauC,GAAb,CAAiBC,CAAC,IAAIA,CAAC,CAAC,MAAD,CAAvB,CAAZ;AACA,UAAInE,MAAM,GAAG2B,IAAI,CAAC,MAAD,CAAJ,CAAauC,GAAb,CAAiBC,CAAC,IAAIA,CAAC,CAAC,KAAD,CAAvB,CAAb;AACA,UAAIY,MAAM,GAAG,KAAKC,SAAL,CAAe3D,KAAf,EAAsBC,KAAtB,EAA6BtB,MAA7B,EAAqC,KAAKF,KAAL,CAAWI,SAAhD,EAA2D,KAAKJ,KAAL,CAAWK,OAAtE,CAAb;AACA,UAAI8E,YAAY,GAAGF,MAAM,CAAC,CAAD,CAAzB;AACA,UAAIG,YAAY,GAAGH,MAAM,CAAC,CAAD,CAAzB;AACA,UAAItD,KAAK,GAAG,KAAKgE,SAAL,EAAZ;AACA,UAAIN,WAAW,GAAG,KAAK/D,cAAL,CAAoB6D,YAApB,EAAkCC,YAAlC,EAAgD3D,WAAhD,EAA6DC,SAA7D,EAAwEC,KAAxE,CAAlB;AACA,WAAKmD,QAAL,CAAc;AACb7E,QAAAA,QAAQ,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,QAAf,EAAyBoF,WAAzB,CADG;AAEb/E,QAAAA,gBAAgB,EAAE,KAAKN,KAAL,CAAWM,gBAAX,CAA4BgG,KAA5B,CAAkC,CAAlC;AAFL,OAAd;AAIA,KAbwB,CAAzB;AAcA;;AAEDC,EAAAA,SAAS,CAACC,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBC,EAAjB,EAAqBC,EAArB,EAAyB;AACjC,WAAO5F,IAAI,CAAC6F,GAAL,CAAU,CAACL,EAAE,GAAGE,EAAN,KAAaH,EAAE,GAAGI,EAAlB,CAAD,GAA2B,CAACH,EAAE,GAAGI,EAAN,KAAaL,EAAE,GAAGE,EAAlB,CAApC,CAAP;AACA,GAxPkC,CAyPnC;AACA;;AACA;;;;;;;;AAMAK,EAAAA,wBAAwB,CAACC,KAAD,EAAQ3C,CAAR,EAAW4C,CAAX,EAAc;AACrC,QAAIC,EAAE,GAAG,CAAT,CADqC,CAC1B;;AACX,QAAIC,EAAE,GAAG,GAAT,CAFqC,CAExB;;AACb,SAAK,IAAI3B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKxF,KAAL,CAAWC,QAAX,CAAoB4E,MAAxC,EAAgDW,CAAC,EAAjD,EAAqD;AACpD,UAAI4B,KAAK,GAAGJ,KAAK,CAACK,cAAN,CAAqB7B,CAArB,EAAwB,MAAxB,CAAZ;AACA4B,MAAAA,KAAK,GAAGA,KAAK,CAAC1B,MAAN,CAAarB,CAAC,IAAIA,CAAC,CAAC,QAAD,CAAD,CAAY,MAAZ,KAAuB,KAAzC,CAAR;;AACA,WAAK,IAAIiD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACvC,MAAN,GAAe,CAAnC,EAAsCyC,CAAC,EAAvC,EAA2C;AAC1C,YAAIC,OAAO,GAAGH,KAAK,CAACE,CAAD,CAAL,CAAS,QAAT,EAAmB,GAAnB,CAAd;AACA,YAAIE,OAAO,GAAGJ,KAAK,CAACE,CAAD,CAAL,CAAS,QAAT,EAAmB,GAAnB,CAAd;AACA,YAAIG,KAAK,GAAGL,KAAK,CAACE,CAAC,GAAG,CAAL,CAAL,CAAa,QAAb,EAAuB,GAAvB,CAAZ;AACA,YAAII,KAAK,GAAGN,KAAK,CAACE,CAAC,GAAG,CAAL,CAAL,CAAa,QAAb,EAAuB,GAAvB,CAAZ;;AACA,YAAIjD,CAAC,GAAIkD,OAAO,GAAGL,EAAf,IAAsB7C,CAAC,GAAIoD,KAAK,GAAGP,EAAvC,EAA4C;AAC3C;AACA;;AACD,YAAIS,YAAY,GAAG,KAAKpB,SAAL,CAAelC,CAAf,EAAkB4C,CAAlB,EAAqBM,OAArB,EAA8BC,OAA9B,EAAuCC,KAAvC,EAA8CC,KAA9C,CAAnB;;AACA,YAAIC,YAAY,GAAGR,EAAnB,EAAuB;AACtB,iBAAO;AAAC,wBAAYC,KAAK,CAACE,CAAD,CAAL,CAAS,eAAT,CAAb;AAAwC,kBAAKF,KAAK,CAACE,CAAD,CAAL,CAAS,QAAT,CAA7C;AAAiE,kBAAKF,KAAK,CAACE,CAAC,GAAC,CAAH,CAAL,CAAW,QAAX;AAAtE,WAAP;AACA;AACD;AACD;;AACD,WAAO,IAAP;AACA;;AAEDM,EAAAA,iBAAiB,CAACC,QAAD,EAAWC,EAAX,EAAeC,EAAf,EAAmB;AACnC,SAAKjD,QAAL,CAAc;AACbtE,MAAAA,kBAAkB,EAAEqH,QADP;AAEbpH,MAAAA,cAAc,EAAEqH,EAFH;AAGbpH,MAAAA,cAAc,EAAEqH;AAHH,KAAd;AAKA;;AAEDC,EAAAA,YAAY,CAAC5E,CAAD,EAAIvB,IAAJ,EAAU;AACrB,QAAImF,KAAK,GAAG,KAAKiB,IAAL,CAAU,OAAV,EAAmB,eAAnB,CAAZ;AACA,QAAIC,KAAK,GAAG9E,CAAC,CAAC,QAAD,CAAb;AACA,QAAI+E,KAAK,GAAG/E,CAAC,CAAC,QAAD,CAAb;AACA,QAAIgF,OAAO,GAAG,KAAKrB,wBAAL,CAA8BC,KAA9B,EAAqCkB,KAArC,EAA4CC,KAA5C,CAAd;;AACA,QAAIC,OAAO,KAAK,IAAhB,EAAsB;AACrB,UAAI,KAAKpI,KAAL,CAAWQ,kBAAX,KAAkC,CAAC,CAAvC,EAA0C;AACzC,aAAKsE,QAAL,CAAc;AACbtE,UAAAA,kBAAkB,EAAE,CAAC,CADR;AAEbC,UAAAA,cAAc,EAAE,CAFH;AAGbC,UAAAA,cAAc,EAAE;AAHH,SAAd;AAKA;;AACD;AACA;;AACD,SAAKkH,iBAAL,CAAuBQ,OAAO,CAAC,UAAD,CAA9B,EAA4CA,OAAO,CAAC,IAAD,CAAnD,EAA2DA,OAAO,CAAC,IAAD,CAAlE;AACA,SAAKC,4BAAL,CAAkCD,OAAO,CAAC,UAAD,CAAzC,EAAuDA,OAAO,CAAC,IAAD,CAA9D,EAAsEA,OAAO,CAAC,IAAD,CAA7E;AACA;;AAEDC,EAAAA,4BAA4B,CAACR,QAAD,EAAWC,EAAX,EAAeC,EAAf,EAAmB;AAC9C,QAAIrG,SAAS,GAAG,KAAK1B,KAAL,CAAWC,QAAX,CAAoB4H,QAApB,EAA8B,WAA9B,CAAhB;AACA,QAAIS,SAAS,GAAG,KAAKtI,KAAL,CAAWC,QAAX,CAAoB4H,QAApB,EAA8B,OAA9B,EAAuCC,EAAvC,CAAhB;AACA,QAAIS,UAAU,GAAG,KAAKvI,KAAL,CAAWC,QAAX,CAAoB4H,QAApB,EAA8B,OAA9B,EAAuCE,EAAvC,CAAjB;AACA;;AAEDS,EAAAA,aAAa,CAACpF,CAAD,EAAIvB,IAAJ,EAAU;AACtB,QAAI4G,CAAC,GAAG,KAAKR,IAAL,CAAU,OAAV,EAAmB,eAAnB,CAAR;;AACA,QAAIpG,IAAI,CAACgD,MAAL,IAAe,CAAnB,EAAsB;AACrB;AACA;;AACD,QAAIgD,QAAQ,GAAGY,CAAC,CAACC,iBAAF,CAAoBtF,CAApB,EAAuB,CAAvB,EAA0B,eAA1B,CAAf;AACA,QAAIuF,cAAc,GAAG,KAAK3I,KAAL,CAAWC,QAAX,CAAoB4H,QAApB,CAArB;AACA,QAAInG,SAAS,GAAGiH,cAAc,CAAC,WAAD,CAA9B;AACA,QAAIlH,WAAW,GAAGkH,cAAc,CAAC,aAAD,CAAhC;AACA,QAAI/D,GAAG,GAAG/C,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,CAAV;AACA,QAAI0G,UAAU,GAAGI,cAAc,CAAC,OAAD,CAAd,CAAwB/D,GAAxB,CAAjB,CAVsB,CAWtB;;AACA,QAAI0D,SAAS,GAAG,IAAhB;AACA1D,IAAAA,GAAG,IAAI,CAAP;;AACA,WAAOA,GAAG,IAAI,CAAd,EAAiB;AAChB0D,MAAAA,SAAS,GAAGK,cAAc,CAAC,OAAD,CAAd,CAAwB/D,GAAxB,CAAZ;;AACA,UAAI0D,SAAS,KAAK,IAAlB,EAAwB;AACvB;AACA;;AACD1D,MAAAA,GAAG,IAAI,CAAP;AACA;;AACD,QAAI0D,SAAS,KAAK,IAAlB,EAAwB;AACvB;AACA;;AACD,QAAIlC,OAAO,GAAG,KAAK7C,yBAAL,CAA+B7B,SAA/B,EAA0C4G,SAA1C,EAAqDC,UAArD,CAAd;AACAnC,IAAAA,OAAO,CAACC,IAAR,CAAatB,QAAQ,IAAIA,QAAQ,CAACC,IAAT,GAAgBqB,IAAhB,CAAqBxE,IAAI,IAAI,CACrD;AACA,KAFwB,CAAzB;AAGA;;AAED+G,EAAAA,MAAM,GAAG;AAER,UAAM3I,QAAQ,GAAG,KAAKD,KAAL,CAAWC,QAAX,CAAoBmE,GAApB,CAAwBC,CAAC,IAAIA,CAAC,CAAC,MAAD,CAA9B,CAAjB;AAEA,QAAIwE,SAAJ;AACA,QAAIC,IAAI,GAAG,KAAK9I,KAAL,CAAWK,OAAX,GAAqB,KAAKL,KAAL,CAAWI,SAA3C;;AACA,QAAI0I,IAAI,GAAG,CAAX,EAAc;AACbD,MAAAA,SAAS,GAAG5H,IAAI,CAAC+E,KAAL,CAAW8C,IAAX,CAAZ;AACA,KAFD,MAEO;AACND,MAAAA,SAAS,GAAG,EAAZ;AACA;;AAED,QAAIJ,CAAC,GAAG,KAAKR,IAAL,CAAU,OAAV,CAAR;AAEA,UAAMc,OAAO,GAAG;AACfC,MAAAA,MAAM,EAAE;AACPC,QAAAA,KAAK,EAAE,CAAC;AACPC,UAAAA,UAAU,EAAE;AACXC,YAAAA,WAAW,EAAE,SADF;AAEXC,YAAAA,OAAO,EAAE;AAFE;AADL,SAAD,CADA;AAOPC,QAAAA,KAAK,EAAE,CAAC;AACPH,UAAAA,UAAU,EAAE;AACXC,YAAAA,WAAW,EAAE,KADF;AAEXC,YAAAA,OAAO,EAAE;AAFE,WADL;AAKPE,UAAAA,KAAK,EAAE;AACNC,YAAAA,aAAa,EAAEV,SADT;AAENW,YAAAA,QAAQ,EAAE,IAFJ;AAGNC,YAAAA,QAAQ,EAAE,UAASC,KAAT,EAAgBC,KAAhB,EAAuB1E,MAAvB,EAA+B;AAExC,kBAAI2E,SAAS,GAAI3F,GAAD,IAAS;AACxBA,gBAAAA,GAAG,GAAGA,GAAG,GAAGhD,IAAI,CAAC+E,KAAL,CAAW/B,GAAX,CAAZ;AACA,uBAAOhD,IAAI,CAAC4I,IAAL,CAAU,KAAK5F,GAAf,CAAP;AACA,eAHD;;AAKA,kBAAI6E,IAAI,GAAG,CAAX,EAAc;AACb,uBAAO7H,IAAI,CAAC+E,KAAL,CAAW0D,KAAX,EAAkB3F,QAAlB,EAAP;AACA,eAFD,MAEO;AACN,oBAAIH,EAAE,GAAGgG,SAAS,CAACF,KAAD,CAAlB;;AACA,oBAAI9F,EAAE,IAAI,CAAV,EAAa;AACZ,yBAAO3C,IAAI,CAAC+E,KAAL,CAAW0D,KAAX,EAAkB3F,QAAlB,EAAP;AACA,iBAFD,MAEO;AACN,yBAAO9C,IAAI,CAAC+E,KAAL,CAAW0D,KAAX,EAAkB3F,QAAlB,KAA+B,GAA/B,GAAqCH,EAAE,CAACG,QAAH,EAA5C;AACA;AACD;AACD;AApBK;AALA,SAAD;AAPA,OADO;AAsCf+F,MAAAA,QAAQ,EAAE;AACTC,QAAAA,IAAI,EAAE,OADG;AAETC,QAAAA,SAAS,EAAE;AAFF,OAtCK;AA2CfC,MAAAA,OAAO,EAAE,CAAC7G,CAAD,EAAIvB,IAAJ,KAAa,KAAKmG,YAAL,CAAkB5E,CAAlB,EAAqBvB,IAArB;AA3CP,KAAhB;AA8CA,UAAMA,IAAI,GAAG;AACZ3B,MAAAA,MAAM,EAAE,KAAKF,KAAL,CAAWE,MADP;AAEZD,MAAAA,QAAQ,EAAEA;AAFE,KAAb;AAIA,QAAIiK,OAAO,GAAG,IAAd;AAEAxK,IAAAA,KAAK,CAACyK,WAAN,CAAkBC,MAAlB,GAA2B1K,KAAK,CAACyK,WAAN,CAAkBE,IAAlB,CAAuBC,MAAvB,CAA8B;AACxDC,MAAAA,IAAI,EAAE,YAAY;AACjB7K,QAAAA,KAAK,CAACyK,WAAN,CAAkBE,IAAlB,CAAuBG,SAAvB,CAAiCD,IAAjC,CAAsCE,KAAtC,CAA4C,IAA5C,EAAkDC,SAAlD;;AAEA,YAAIR,OAAO,CAAClK,KAAR,CAAcQ,kBAAd,IAAoC,CAAC,CAAzC,EAA4C;AAC3C;AACA;;AAED,iBAASmK,SAAT,CAAmBC,GAAnB,EAAuBjB,KAAvB,EAA6BkB,GAA7B,EAAkC;AAC9B,cAAGlB,KAAK,GAAGiB,GAAG,CAAC/F,MAAJ,GAAW,CAAtB,EAAyB,OAAO+F,GAAP;AACxB,iBAAOA,GAAG,CAACE,MAAJ,CAAW,CAAX,EAAanB,KAAb,IAAsBkB,GAAtB,GAA4BD,GAAG,CAACE,MAAJ,CAAWnB,KAAK,GAAC,CAAjB,CAAnC;AACJ;;AAED,YAAIoB,IAAI,GAAG,KAAK,OAAL,EAAc1D,cAAd,CAA6B6C,OAAO,CAAClK,KAAR,CAAcQ,kBAA3C,CAAX;AACA,YAAIwK,GAAG,GAAG,KAAKhE,KAAL,CAAWgE,GAArB;AACA,YAAIrJ,KAAK,GAAGoJ,IAAI,CAAC,SAAD,CAAJ,CAAgB,QAAhB,EAA0B,aAA1B,CAAZ;AACAC,QAAAA,GAAG,CAACC,WAAJ,GAAkBtJ,KAAK,CAACmJ,MAAN,CAAa,CAAb,EAAgBnJ,KAAK,CAACkD,MAAN,GAAe,CAA/B,IAAoC,MAAtD;AACAmG,QAAAA,GAAG,CAACE,SAAJ,GAAgB,CAAhB;AACAF,QAAAA,GAAG,CAACG,SAAJ;AACA,YAAIC,MAAM,GAAGL,IAAI,CAAC,MAAD,CAAJ,CAAab,OAAO,CAAClK,KAAR,CAAcS,cAA3B,CAAb;AACAuK,QAAAA,GAAG,CAACK,MAAJ,CAAWD,MAAM,CAAC,QAAD,CAAN,CAAiB,GAAjB,CAAX,EAAkCA,MAAM,CAAC,QAAD,CAAN,CAAiB,GAAjB,CAAlC;AACA,YAAIE,MAAM,GAAGP,IAAI,CAAC,MAAD,CAAJ,CAAab,OAAO,CAAClK,KAAR,CAAcU,cAA3B,CAAb;AACAsK,QAAAA,GAAG,CAACO,aAAJ,CACCH,MAAM,CAAC,QAAD,CAAN,CAAiB,GAAjB,CADD,EAECA,MAAM,CAAC,QAAD,CAAN,CAAiB,GAAjB,CAFD,EAGCA,MAAM,CAAC,QAAD,CAAN,CAAiB,mBAAjB,CAHD,EAICA,MAAM,CAAC,QAAD,CAAN,CAAiB,mBAAjB,CAJD,EAKCE,MAAM,CAAC,QAAD,CAAN,CAAiB,GAAjB,CALD,EAMCA,MAAM,CAAC,QAAD,CAAN,CAAiB,GAAjB,CAND;AAQAN,QAAAA,GAAG,CAACQ,MAAJ;AACA;AA/BuD,KAA9B,CAA3B;AAkCA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,cAAD;AACC,MAAA,IAAI,EAAC,QADN;AAEC,MAAA,GAAG,EAAC,OAFL;AAGC,MAAA,IAAI,EAAE3J,IAHP;AAIC,MAAA,OAAO,EAAEkH,OAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADD;AAUA;;AArckC;;AAA9BnJ,K,CA4BEW,M,GAAS,CACf,qBADe,EAEf,qBAFe,EAGf,sBAHe,EAIf,qBAJe,EAKf,sBALe,EAMf,sBANe,EAOf,oBAPe,EAQf,oBARe,C;AA4ajB,eAAeX,KAAf","sourcesContent":["import React from 'react';\nimport ChartComponent, {Chart, Line} from 'react-chartjs-2';\n\nclass Graph extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tdatasets: [],\n\t\t\tlabels: this.get_labels(20, 30),\n\t\t\tstart_age: 20,\n\t\t\tend_age: 30,\n\t\t\tavailable_colors: Graph.colors,\n\t\t\thighlight_data_idx: -1,\n\t\t\thighlight_idx1: 0,\n\t\t\thighlight_idx2: 0\n\t\t}\n\t}\n\n\tget_labels(start_yr, end_yr) {\n\t\tif (start_yr >= end_yr) {\n\t\t\treturn []\n\t\t}\n\t\tvar start = start_yr + (1/96)\n\t\tvar labels = []\n\t\twhile (start <= end_yr) {\n\t\t\tlabels.push(start)\n\t\t\tstart = start + (1/96)\n\t\t}\n\t\treturn labels\n\t}\n\n\tstatic colors = [\n\t\t'rgb(76, 128, 24, 1)',\n\t\t'rgb(24, 76, 128, 1)',\n\t\t'rgb(128, 24, 128, 1)',\n\t\t'rgb(216, 12, 12, 1)',\n\t\t'rgb(225, 122, 19, 1)',\n\t\t'rgb(19, 225, 225, 1)',\n\t\t'rgb(68, 97, 39, 1)',\n\t\t'rgb(97, 39, 39, 1)'\n\t]\n\n\tgenerate_color() {\n\t\tvar o = Math.round, r = Math.random, s = 255;\n\t\treturn 'rgba(' + o(r()*s) + ',' + o(r()*s) + ',' + o(r()*s) + ',' + 1 + ')';\n\t}\n\n\tcreate_dataset(ranks, dates, player_name, player_id, color) {\n\t\tvar res =\n\t\t{\n\t\t\tdata: {\n\t\t\t\tmy_id: player_id,\n\t\t\t\tlabel: player_name,\n\t\t\t\tspanGaps: true,\n\t\t\t\tfill: false,\n\t\t\t\tlineTension: 0.1,\n\t\t\t\tbackgroundColor: color,\n\t\t\t\tborderColor: color,\n\t\t\t\tborderCapStyle: 'butt',\n\t\t\t\tborderDash: [],\n\t\t\t\tborderDashOffset: 0.0,\n\t\t\t\tborderJoinStyle: 'miter',\n\t\t\t\tpointBorderColor: color,\n\t\t\t\tpointBackgroundColor: '#fff',\n\t\t\t\tpointBorderWidth: 4,\n\t\t\t\tpointHoverRadius: 7,\n\t\t\t\tpointHoverBackgroundColor: color,\n\t\t\t\tpointHoverBorderColor: 'rgba(220,220,220,1)',\n\t\t\t\tpointHoverBorderWidth: 1,\n\t\t\t\tpointRadius: 1,\n\t\t\t\tpointHitRadius: 1,\n\t\t\t\tdata: ranks,\n\t\t\t},\n\t\t\tdates: dates,\n\t\t\tplayer_id: player_id,\n\t\t\tplayer_name: player_name\n\t\t}\n\n\t\treturn res\n\t}\n\n\t// http GET to flask api to fetch ranking history of player with id=p_id between ages of s and e\n\tfetch_ranking_history(p_id, s, e) {\n\t\tvar endpt = `/get_ranking_history?player_id=${p_id}&starting_age=${s}&ending_age=${e}`\n\t\treturn fetch(endpt)\n\t}\n\n\t// http GET to flask api to fetch significant matches for this player at this age\n\tfetch_significant_matches(p_id, date1, date2) {\n\n\t\t// const sub_weeks = (date, N) => {\n\t\t// \tif (N == 0) {\n\t\t// \t\treturn date\n\t\t// \t}\n\n\t\t// \tvar year = date['yr']\n\t\t// \tvar mo = date['mo']\n\t\t// \tvar day = date['day']\n\n\t\t// \tif (day - 7 >= 1) {\n\t\t// \t\tday = day - 7\n\t\t// \t\treturn sub_weeks({'yr': year, 'mo':mo, 'day':day}, N - 1)\n\t\t// \t}\n\n\t\t// \tday = 30 - (7 - day)\n\t\t// \tmo -= 1\n\t\t// \tif (mo == 2 && day >= 29) {\n\t\t// \t\tday = 28\n\t\t// \t}\n\n\t\t// \tif (mo == 0) {\n\t\t// \t\tmo = 12\n\t\t// \t\tyear -= 1\n\t\t// \t}\n\n\t\t// \treturn sub_weeks({'yr': year, 'mo':mo, 'day':day}, N - 1)\n\t\t// }\n\n\t\tconst date_str = (date) => {\n\t\t\tvar mo;\n\t\t\tvar day;\n\t\t\tvar yr = date['yr']\n\t\t\tif (date['mo'] < 10) {\n\t\t\t\tmo = \"0\" + date['mo'].toString()\n\t\t\t} else{\n\t\t\t\tmo = date['mo'].toString()\n\t\t\t}\n\t\t\tif (date['day'] < 10){\n\t\t\t\tday = \"0\" + date['day'].toString()\n\t\t\t} else {\n\t\t\t\tday = date['day'].toString()\n\t\t\t}\n\t\t\tvar res = yr + mo + day\n\t\t\treturn res\n\t\t}\n\n\t\tdate1 = date_str(date1)\n\t\tdate2 = date_str(date2)\n\t\tvar endpt = `/get_significant_matches?player_id=${p_id}&date1=${date1}&date2=${date2}`\n\t\treturn fetch(endpt)\n\t}\n\n\tchangeAgeRange(val, min_max) {\n\t\t// if any part of the interval of the new range is in the old range,\n\t\t// then we don't necessarily need to refetch this data. but for now\n\t\t// to keep things simple, just refetch everything\n\t\tvar old_colors = this.state.datasets.map(x => x['data']['backgroundColor'])\n\t\tvar player_ids = this.state.datasets.map(x => x['player_id'])\n\t\tvar player_names = this.state.datasets.map(x => x['player_name'])\n\t\tvar new_datasets = [];\n\t\tvar start = this.state.start_age\n\t\tvar end = this.state.end_age\n\t\tif (min_max == \"max\") {\n\t\t\tend = val\n\t\t} else {\n\t\t\tstart = val\n\t\t}\n\t\tvar new_labels = this.get_labels(start, end)\n\n\t\tconst request = async(idx) => {\n\t\t\tif (idx >= player_ids.length) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tdatasets: new_datasets,\n\t\t\t\t\tlabels: new_labels,\n\t\t\t\t\tstart_age: start,\n\t\t\t\t\tend_age: end\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\t\t\tvar endpt = `/get_ranking_history?player_id=${player_ids[idx]}&starting_age=${start}&ending_age=${end}`\n\t\t\tconst response = await fetch(endpt);\n\t\t\tconst data = await response.json();\n\t\t\tvar dates = data['data'].map(x => x['date'])\n\t\t\tvar ranks = data['data'].map(x => x['rank'])\n\t\t\tvar labels = data['data'].map(x => x['age'])\n\t\t\tvar values = this.pad_ranks(ranks, dates, labels, start, end)\n\t\t\tvar padded_ranks = values[0]\n\t\t\tvar padded_dates = values[1]\n\t\t\tvar new_dataset = this.create_dataset(padded_ranks, padded_dates, player_names[idx], player_ids[idx], old_colors[idx])\n\t\t\tnew_datasets.push(new_dataset)\n\t\t\trequest(idx + 1)\n\t\t}\n\t\trequest(0)\n\t}\n\n\tremovePlayer(player_id) {\n\t\tvar new_available_colors = this.state.available_colors;\n\t\tfor (var i = 0; i < this.state.datasets.length; i++) {\n\t\t\tif (this.state.datasets[i]['player_id'] === player_id) {\n\t\t\t\tnew_available_colors.unshift(this.state.datasets[i]['data']['backgroundColor'])\n\t\t\t}\n\t\t}\n\n\t\tthis.setState({\n\t\t\tdatasets: this.state.datasets.filter(x => x['player_id'] !== player_id),\n\t\t\tavailable_colors: new_available_colors\n\t\t})\n\t}\n\n\tget_color() {\n\t\tvar color;\n\t\tif (this.state.available_colors.length == 0) {\n\t\t\treturn this.generate_color()\n\t\t}\n\t\treturn this.state.available_colors[0]\n\t}\n\n\tpad_ranks(ranks, dates, labels, start, end) {\n\t\tvar new_ranks = Array(Math.max(end - start, 0) * 96).fill(null)\n\t\tvar new_dates = Array(Math.max(end - start, 0) * 96).fill(null)\n\t\tfor (var i = 0; i < labels.length; i++) {\n\t\t\tif (labels[i] < start || labels[i] > end) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tvar idx = Math.floor((labels[i] - start) / (1/96))\n\t\t\tnew_dates[idx] = dates[i]\n\t\t\tif (new_ranks[idx] === null) {\n\t\t\t\tnew_ranks[idx] = ranks[i]\n\t\t\t} else {\n\t\t\t\tnew_ranks[idx] = Math.min(new_ranks[idx], ranks[i])\n\t\t\t}\n\t\t}\n\t\treturn [new_ranks, new_dates]\n\t}\n\n\taddPlayer(player_id, player_name) {\n\n\t\t// first check to see if this player has already been added\n\t\tif (this.state.datasets.map(x => x['player_id']).includes(player_id)) {\n\t\t\treturn\n\t\t}\n\n\t\tvar promise = this.fetch_ranking_history(player_id, this.state.start_age, this.state.end_age)\n\t\tpromise.then(response => response.json().then(data => {\n\t\t\tvar ranks = data['data'].map(x => x['rank'])\n\t\t\tvar dates = data['data'].map(x => x['date'])\n\t\t\tvar labels = data['data'].map(x => x['age'])\n\t\t\tvar values = this.pad_ranks(ranks, dates, labels, this.state.start_age, this.state.end_age)\n\t\t\tvar padded_ranks = values[0]\n\t\t\tvar padded_dates = values[1]\n\t\t\tvar color = this.get_color()\n\t\t\tvar new_dataset = this.create_dataset(padded_ranks, padded_dates, player_name, player_id, color)\n\t\t\tthis.setState({\n\t\t\t\tdatasets: [...this.state.datasets, new_dataset],\n\t\t\t\tavailable_colors: this.state.available_colors.slice(1)\n\t\t\t})\n\t\t}))\n\t}\n\n\tcollinear(x1, y1, x2, y2, x3, y3) {\n\t\treturn Math.abs(((y1 - y2) * (x1 - x3)) - ((y1 - y3) * (x1 - x2)))\n\t}\n\t// \n\t// such that these x and y coordinates are collinear with those\n\t/*\n\tfind (if any) the two consecutive data points in any of the datasets\n\tsuch that these x and y coordinates are collinear with those point\n\tAND x lies beteen p1.x and p2.x.\n\tif none, return null\n\t*/\n\tget_segment_intersection(chart, x, y) {\n\t\tvar e1 = 1 // slack for x\n\t\tvar e2 = 500 // slack for collineariy measure\n\t\tfor (var i = 0; i < this.state.datasets.length; i++) {\n\t\t\tvar nodes = chart.getDatasetMeta(i)['data']\n\t\t\tnodes = nodes.filter(x => x['_model']['skip'] == false)\n\t\t\tfor (var j = 0; j < nodes.length - 1; j++) {\n\t\t\t\tvar start_x = nodes[j]['_model']['x']\n\t\t\t\tvar start_y = nodes[j]['_model']['y']\n\t\t\t\tvar end_x = nodes[j + 1]['_model']['x']\n\t\t\t\tvar end_y = nodes[j + 1]['_model']['y']\n\t\t\t\tif (x < (start_x - e1) || x > (end_x + e1)) {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tvar collinearity = this.collinear(x, y, start_x, start_y, end_x, end_y)\n\t\t\t\tif (collinearity < e2) {\n\t\t\t\t\treturn {'data_idx': nodes[j]['_datasetIndex'], 'i1':nodes[j]['_index'], 'i2':nodes[j+1]['_index']}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null\n\t}\n\n\thighlight_segment(data_idx, i1, i2) {\n\t\tthis.setState({\n\t\t\thighlight_data_idx: data_idx,\n\t\t\thighlight_idx1: i1,\n\t\t\thighlight_idx2: i2\n\t\t})\n\t}\n\n\thandle_hover(e, data) {\n\t\tvar chart = this.refs['graph']['chartInstance']\n\t\tvar x_pos = e['layerX']\n\t\tvar y_pos = e['layerY']\n\t\tvar indices = this.get_segment_intersection(chart, x_pos, y_pos)\n\t\tif (indices === null) {\n\t\t\tif (this.state.highlight_data_idx !== -1) {\n\t\t\t\tthis.setState({\n\t\t\t\t\thighlight_data_idx: -1,\n\t\t\t\t\thighlight_idx1: 0,\n\t\t\t\t\thighlight_idx2: 0\n\t\t\t\t})\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\tthis.highlight_segment(indices['data_idx'], indices['i1'], indices['i2'])\n\t\tthis.fetch_and_process_match_data(indices['data_idx'], indices['i1'], indices['i2'])\n\t}\n\n\tfetch_and_process_match_data(data_idx, i1, i2) {\n\t\tvar player_id = this.state.datasets[data_idx]['player_id']\n\t\tvar left_date = this.state.datasets[data_idx]['dates'][i1]\n\t\tvar right_date = this.state.datasets[data_idx]['dates'][i2]\n\t}\n\n\thandle_hover2(e, data) {\n\t\tvar g = this.refs['graph']['chartInstance']\n\t\tif (data.length == 0) {\n\t\t\treturn\n\t\t}\n\t\tvar data_idx = g.getElementAtEvent(e)[0]['_datasetIndex']\n\t\tvar target_dataset = this.state.datasets[data_idx]\n\t\tvar player_id = target_dataset['player_id']\n\t\tvar player_name = target_dataset['player_name']\n\t\tvar idx = data[0]['_index']\n\t\tvar right_date = target_dataset['dates'][idx]\n\t\t// get the previous two dates\n\t\tvar left_date = null;\n\t\tidx -= 1;\n\t\twhile (idx >= 0) {\n\t\t\tleft_date = target_dataset['dates'][idx]\n\t\t\tif (left_date !== null) {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tidx -= 1\n\t\t}\n\t\tif (left_date === null) {\n\t\t\treturn\n\t\t}\n\t\tvar promise = this.fetch_significant_matches(player_id, left_date, right_date)\n\t\tpromise.then(response => response.json().then(data => {\n\t\t\t// console.log(data)\n\t\t}))\n\t}\n\n\trender() {\n\n\t\tconst datasets = this.state.datasets.map(x => x['data'])\n\n\t\tvar max_ticks;\n\t\tvar diff = this.state.end_age - this.state.start_age\n\t\tif (diff > 5) {\n\t\t\tmax_ticks = Math.floor(diff)\n\t\t} else {\n\t\t\tmax_ticks = 10\n\t\t}\n\n\t\tvar g = this.refs['graph']\n\n\t\tconst options = {\n\t\t\tscales: {\n\t\t\t\tyAxes: [{\n\t\t\t\t\tscaleLabel: {\n\t\t\t\t\t\tlabelString: \"Ranking\",\n\t\t\t\t\t\tdisplay: true\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t\txAxes: [{\n\t\t\t\t\tscaleLabel: {\n\t\t\t\t\t\tlabelString: \"Age\",\n\t\t\t\t\t\tdisplay: true\n\t\t\t\t\t},\n\t\t\t\t\tticks: {\n\t\t\t\t\t\tmaxTicksLimit: max_ticks,\n\t\t\t\t\t\tautoSkip: true,\n\t\t\t\t\t\tcallback: function(value, index, values) {\n\n\t\t\t\t\t\t\tvar get_month = (val) => {\n\t\t\t\t\t\t\t\tval = val - Math.floor(val)\n\t\t\t\t\t\t\t\treturn Math.ceil(12 * val)\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (diff > 5) {\n\t\t\t\t\t\t\t\treturn Math.floor(value).toString()\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvar mo = get_month(value)\n\t\t\t\t\t\t\t\tif (mo == 0) {\n\t\t\t\t\t\t\t\t\treturn Math.floor(value).toString()\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn Math.floor(value).toString() + \".\" + mo.toString()\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t},\n\n\t\t\ttooltips: {\n\t\t\t\tmode: 'point',\n\t\t\t\tintersect: true\n\t\t\t},\n\n\t\t\tonHover: (e, data) => this.handle_hover(e, data)\n\t\t}\n\n\t\tconst data = {\n\t\t\tlabels: this.state.labels,\n\t\t\tdatasets: datasets\n\t\t};\n\t\tvar the_obj = this\n\n\t\tChart.controllers.myLine = Chart.controllers.line.extend({\n\t\t\tdraw: function () {\n\t\t\t\tChart.controllers.line.prototype.draw.apply(this, arguments)\n\t\t\t\t\n\t\t\t\tif (the_obj.state.highlight_data_idx == -1) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tfunction setCharAt(str,index,chr) {\n    \t\t\t\tif(index > str.length-1) return str;\n    \t\t\t\t\treturn str.substr(0,index) + chr + str.substr(index+1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar meta = this['chart'].getDatasetMeta(the_obj.state.highlight_data_idx)\n\t\t\t\tvar ctx = this.chart.ctx;\n\t\t\t\tvar color = meta['dataset']['_model']['borderColor']\n\t\t\t\tctx.strokeStyle = color.substr(0, color.length - 2) + \"0.3)\"\n\t\t\t\tctx.lineWidth = 8;\n\t\t\t\tctx.beginPath();\n\t\t\t\tvar point1 = meta['data'][the_obj.state.highlight_idx1]\n\t\t\t\tctx.moveTo(point1['_model']['x'], point1['_model']['y'])\n\t\t\t\tvar point2 = meta['data'][the_obj.state.highlight_idx2]\n\t\t\t\tctx.bezierCurveTo(\n\t\t\t\t\tpoint1['_model']['x'],\n\t\t\t\t\tpoint1['_model']['y'],\n\t\t\t\t\tpoint1['_model']['controlPointNextX'],\n\t\t\t\t\tpoint1['_model']['controlPointNextY'],\n\t\t\t\t\tpoint2['_model']['x'],\n\t\t\t\t\tpoint2['_model']['y']\n\t\t\t\t);\n\t\t\t\tctx.stroke();\n\t\t\t}\n\t\t});\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<ChartComponent\n\t\t\t\t\ttype='myLine'\n\t\t\t\t\tref=\"graph\"\n\t\t\t\t\tdata={data}\n\t\t\t\t\toptions={options}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}